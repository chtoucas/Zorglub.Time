abstract Zorglub.Time.Core.CalendricalSchema.CountDaysInMonth(int y, int m) -> int
abstract Zorglub.Time.Core.CalendricalSchema.CountDaysInYear(int y) -> int
abstract Zorglub.Time.Core.CalendricalSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
abstract Zorglub.Time.Core.CalendricalSchema.CountMonthsInYear(int y) -> int
abstract Zorglub.Time.Core.CalendricalSchema.CountMonthsSinceEpoch(int y, int m) -> int
abstract Zorglub.Time.Core.CalendricalSchema.Family.get -> Zorglub.Time.CalendricalFamily
abstract Zorglub.Time.Core.CalendricalSchema.GetMonth(int y, int doy, out int d) -> int
abstract Zorglub.Time.Core.CalendricalSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
abstract Zorglub.Time.Core.CalendricalSchema.GetStartOfYear(int y) -> int
abstract Zorglub.Time.Core.CalendricalSchema.GetYear(int daysSinceEpoch) -> int
abstract Zorglub.Time.Core.CalendricalSchema.IsIntercalaryDay(int y, int m, int d) -> bool
abstract Zorglub.Time.Core.CalendricalSchema.IsIntercalaryMonth(int y, int m) -> bool
abstract Zorglub.Time.Core.CalendricalSchema.IsLeapYear(int y) -> bool
abstract Zorglub.Time.Core.CalendricalSchema.IsRegular(out int monthsInYear) -> bool
abstract Zorglub.Time.Core.CalendricalSchema.IsSupplementaryDay(int y, int m, int d) -> bool
abstract Zorglub.Time.Core.CalendricalSchema.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
abstract Zorglub.Time.Core.Schemas.EgyptianSchema.MonthsInYear.get -> int
abstract Zorglub.Time.Core.Schemas.PtolemaicSchema.MonthsInYear.get -> int
abstract Zorglub.Time.Core.SystemArithmetic.AddDays(Zorglub.Time.Core.Yedoy ydoy, int days) -> Zorglub.Time.Core.Yedoy
abstract Zorglub.Time.Core.SystemArithmetic.AddDays(Zorglub.Time.Core.Yemoda ymd, int days) -> Zorglub.Time.Core.Yemoda
abstract Zorglub.Time.Core.SystemArithmetic.AddDaysViaDayOfMonth(Zorglub.Time.Core.Yemoda ymd, int days) -> Zorglub.Time.Core.Yemoda
abstract Zorglub.Time.Core.SystemArithmetic.AddDaysViaDayOfYear(Zorglub.Time.Core.Yedoy ydoy, int days) -> Zorglub.Time.Core.Yedoy
abstract Zorglub.Time.Core.SystemArithmetic.AddMonths(Zorglub.Time.Core.Yemo ym, int months) -> Zorglub.Time.Core.Yemo
abstract Zorglub.Time.Core.SystemArithmetic.AddMonths(Zorglub.Time.Core.Yemoda ymd, int months, out int roundoff) -> Zorglub.Time.Core.Yemoda
abstract Zorglub.Time.Core.SystemArithmetic.AddYears(Zorglub.Time.Core.Yedoy ydoy, int years, out int roundoff) -> Zorglub.Time.Core.Yedoy
abstract Zorglub.Time.Core.SystemArithmetic.AddYears(Zorglub.Time.Core.Yemo ym, int years, out int roundoff) -> Zorglub.Time.Core.Yemo
abstract Zorglub.Time.Core.SystemArithmetic.AddYears(Zorglub.Time.Core.Yemoda ymd, int years, out int roundoff) -> Zorglub.Time.Core.Yemoda
abstract Zorglub.Time.Core.SystemArithmetic.CountMonthsBetween(Zorglub.Time.Core.Yemo start, Zorglub.Time.Core.Yemo end) -> int
abstract Zorglub.Time.Core.SystemArithmetic.NextDay(Zorglub.Time.Core.Yedoy ydoy) -> Zorglub.Time.Core.Yedoy
abstract Zorglub.Time.Core.SystemArithmetic.NextDay(Zorglub.Time.Core.Yemoda ymd) -> Zorglub.Time.Core.Yemoda
abstract Zorglub.Time.Core.SystemArithmetic.PreviousDay(Zorglub.Time.Core.Yedoy ydoy) -> Zorglub.Time.Core.Yedoy
abstract Zorglub.Time.Core.SystemArithmetic.PreviousDay(Zorglub.Time.Core.Yemoda ymd) -> Zorglub.Time.Core.Yemoda
abstract Zorglub.Time.Core.SystemSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
abstract Zorglub.Time.Hemerology.BasicCalendar<TScope>.CountDaysInMonth(int year, int month) -> int
abstract Zorglub.Time.Hemerology.BasicCalendar<TScope>.CountDaysInYear(int year) -> int
abstract Zorglub.Time.Hemerology.BasicCalendar<TScope>.CountMonthsInYear(int year) -> int
abstract Zorglub.Time.Hemerology.Scopes.CalendarScope.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
abstract Zorglub.Time.Hemerology.Scopes.CalendarScope.ValidateYearMonth(int year, int month, string? paramName = null) -> void
abstract Zorglub.Time.Hemerology.Scopes.CalendarScope.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
abstract Zorglub.Time.Simple.CalendarMath.AddMonthsCore(Zorglub.Time.Simple.CalendarDate date, int months) -> Zorglub.Time.Simple.CalendarDate
abstract Zorglub.Time.Simple.CalendarMath.AddYearsCore(Zorglub.Time.Simple.CalendarDate date, int years) -> Zorglub.Time.Simple.CalendarDate
abstract Zorglub.Time.Simple.CalendarMath.AddYearsCore(Zorglub.Time.Simple.CalendarMonth month, int years) -> Zorglub.Time.Simple.CalendarMonth
abstract Zorglub.Time.Simple.CalendarMath.AddYearsCore(Zorglub.Time.Simple.OrdinalDate date, int years) -> Zorglub.Time.Simple.OrdinalDate
const Zorglub.Time.Core.CalendricalConstants.DaysInWanderingYear = 365 -> int
const Zorglub.Time.Core.CalendricalConstants.DaysInWeek = 7 -> int
const Zorglub.Time.Core.CalendricalConstants.DaysPer4JulianYearCycle = 1461 -> int
const Zorglub.Time.Core.Schemas.CopticSchema.DaysInCopticMonth = 30 -> int
const Zorglub.Time.Core.Schemas.CopticSchema.DaysPer4YearCycle = 1461 -> int
const Zorglub.Time.Core.Schemas.EgyptianSchema.DaysInEgyptianMonth = 30 -> int
const Zorglub.Time.Core.Schemas.EgyptianSchema.DaysInYear = 365 -> int
const Zorglub.Time.Core.Schemas.GJSchema.DaysInCommonYear = 365 -> int
const Zorglub.Time.Core.Schemas.GJSchema.DaysInLeapYear = 366 -> int
const Zorglub.Time.Core.Schemas.GJSchema.DaysInYearAfterFebruary = 306 -> int
const Zorglub.Time.Core.Schemas.GregorianSchema.DaysPer100YearSubcycle = 36524 -> int
const Zorglub.Time.Core.Schemas.GregorianSchema.DaysPer400YearCycle = 146097 -> int
const Zorglub.Time.Core.Schemas.GregorianSchema.DaysPer4YearSubcycle = 1461 -> int
const Zorglub.Time.Core.Schemas.JulianSchema.DaysPer4YearCycle = 1461 -> int
const Zorglub.Time.Core.Schemas.PtolemaicSchema.DaysInCommonYear = 365 -> int
const Zorglub.Time.Core.Schemas.PtolemaicSchema.DaysInLeapYear = 366 -> int
const Zorglub.Time.Core.Schemas.TabularIslamicSchema.DaysInCommonYear = 354 -> int
const Zorglub.Time.Core.Schemas.TabularIslamicSchema.DaysInLeapYear = 355 -> int
const Zorglub.Time.Core.Schemas.TabularIslamicSchema.DaysPer30YearCycle = 10631 -> int
const Zorglub.Time.Core.TemporalConstants.HoursPerDay = 24 -> int
const Zorglub.Time.Core.TemporalConstants.MicrosecondsPerDay = 86400000000 -> long
const Zorglub.Time.Core.TemporalConstants.MicrosecondsPerHour = 3600000000 -> long
const Zorglub.Time.Core.TemporalConstants.MicrosecondsPerMinute = 60000000 -> int
const Zorglub.Time.Core.TemporalConstants.MicrosecondsPerSecond = 1000000 -> int
const Zorglub.Time.Core.TemporalConstants.MillisecondsPerDay = 86400000 -> int
const Zorglub.Time.Core.TemporalConstants.MillisecondsPerHour = 3600000 -> int
const Zorglub.Time.Core.TemporalConstants.MillisecondsPerMinute = 60000 -> int
const Zorglub.Time.Core.TemporalConstants.MillisecondsPerSecond = 1000 -> int
const Zorglub.Time.Core.TemporalConstants.MinutesPerDay = 1440 -> int
const Zorglub.Time.Core.TemporalConstants.MinutesPerHour = 60 -> int
const Zorglub.Time.Core.TemporalConstants.NanosecondsPerDay = 86400000000000 -> long
const Zorglub.Time.Core.TemporalConstants.NanosecondsPerHour = 3600000000000 -> long
const Zorglub.Time.Core.TemporalConstants.NanosecondsPerMinute = 60000000000 -> long
const Zorglub.Time.Core.TemporalConstants.NanosecondsPerSecond = 1000000000 -> int
const Zorglub.Time.Core.TemporalConstants.SecondsPerDay = 86400 -> int
const Zorglub.Time.Core.TemporalConstants.SecondsPerHour = 3600 -> int
const Zorglub.Time.Core.TemporalConstants.SecondsPerMinute = 60 -> int
const Zorglub.Time.Core.TemporalConstants.TicksPerDay = 864000000000 -> long
const Zorglub.Time.Core.TemporalConstants.TicksPerHour = 36000000000 -> long
const Zorglub.Time.Core.TemporalConstants.TicksPerMinute = 600000000 -> int
const Zorglub.Time.Core.TemporalConstants.TicksPerSecond = 10000000 -> int
const Zorglub.Time.Core.Yedoy.MaxDayOfYear = 1024 -> int
const Zorglub.Time.Core.Yedoy.MaxYear = 2097152 -> int
const Zorglub.Time.Core.Yedoy.MinDayOfYear = 1 -> int
const Zorglub.Time.Core.Yedoy.MinYear = -2097151 -> int
const Zorglub.Time.Core.Yedoyx.MaxDayOfYear = 1024 -> int
const Zorglub.Time.Core.Yedoyx.MaxExtra = 127 -> int
const Zorglub.Time.Core.Yedoyx.MaxYear = 16384 -> int
const Zorglub.Time.Core.Yedoyx.MinDayOfYear = 1 -> int
const Zorglub.Time.Core.Yedoyx.MinExtra = 0 -> int
const Zorglub.Time.Core.Yedoyx.MinYear = -16383 -> int
const Zorglub.Time.Core.Yemo.MaxMonth = 16 -> int
const Zorglub.Time.Core.Yemo.MaxYear = 2097152 -> int
const Zorglub.Time.Core.Yemo.MinMonth = 1 -> int
const Zorglub.Time.Core.Yemo.MinYear = -2097151 -> int
const Zorglub.Time.Core.Yemoda.MaxDay = 64 -> int
const Zorglub.Time.Core.Yemoda.MaxMonth = 16 -> int
const Zorglub.Time.Core.Yemoda.MaxYear = 2097152 -> int
const Zorglub.Time.Core.Yemoda.MinDay = 1 -> int
const Zorglub.Time.Core.Yemoda.MinMonth = 1 -> int
const Zorglub.Time.Core.Yemoda.MinYear = -2097151 -> int
const Zorglub.Time.Core.Yemodax.MaxDay = 64 -> int
const Zorglub.Time.Core.Yemodax.MaxExtra = 127 -> int
const Zorglub.Time.Core.Yemodax.MaxMonth = 16 -> int
const Zorglub.Time.Core.Yemodax.MaxYear = 16384 -> int
const Zorglub.Time.Core.Yemodax.MinDay = 1 -> int
const Zorglub.Time.Core.Yemodax.MinExtra = 0 -> int
const Zorglub.Time.Core.Yemodax.MinMonth = 1 -> int
const Zorglub.Time.Core.Yemodax.MinYear = -16383 -> int
const Zorglub.Time.Core.Yemox.MaxExtra = 127 -> int
const Zorglub.Time.Core.Yemox.MaxMonth = 16 -> int
const Zorglub.Time.Core.Yemox.MaxYear = 16384 -> int
const Zorglub.Time.Core.Yemox.MinExtra = 0 -> int
const Zorglub.Time.Core.Yemox.MinMonth = 1 -> int
const Zorglub.Time.Core.Yemox.MinYear = -16383 -> int
const Zorglub.Time.DayNumber.MaxDaysSinceZero = 2147483646 -> int
const Zorglub.Time.DayNumber.MaxSupportedYear = 5000000 -> int
const Zorglub.Time.DayNumber.MinDaysSinceZero = -2147483647 -> int
const Zorglub.Time.DayNumber.MinSupportedYear = -4999999 -> int
const Zorglub.Time.Hemerology.Scopes.ProlepticScope.MaxYear = 9999 -> int
const Zorglub.Time.Hemerology.Scopes.ProlepticScope.MinYear = -9998 -> int
const Zorglub.Time.Hemerology.Scopes.StandardScope.MaxYear = 9999 -> int
const Zorglub.Time.Hemerology.Scopes.StandardScope.MinYear = 1 -> int
const Zorglub.Time.Ord.MaxAlgebraicValue = 2147483647 -> int
const Zorglub.Time.Ord.MinAlgebraicValue = -2147483646 -> int
override sealed Zorglub.Time.Core.CalendricalSegment.ToString() -> string!
override sealed Zorglub.Time.Core.Schemas.CivilSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Zorglub.Time.Core.Schemas.CivilSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.CivilSchema.GetStartOfYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.CivilSchema.GetYear(int daysSinceEpoch) -> int
override sealed Zorglub.Time.Core.Schemas.CivilSchema.IsLeapYear(int y) -> bool
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.CountMonthsInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.Coptic12Schema.MonthsInYear.get -> int
override sealed Zorglub.Time.Core.Schemas.CopticSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Zorglub.Time.Core.Schemas.CopticSchema.GetStartOfYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.CopticSchema.GetYear(int daysSinceEpoch) -> int
override sealed Zorglub.Time.Core.Schemas.CopticSchema.IsLeapYear(int y) -> bool
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.CountDaysInMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.CountMonthsInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.GetMonth(int y, int doy, out int d) -> int
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.Egyptian12Schema.MonthsInYear.get -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.CountDaysInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.Family.get -> Zorglub.Time.CalendricalFamily
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.GetStartOfYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.GetYear(int daysSinceEpoch, out int doy) -> int
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.IsLeapYear(int y) -> bool
override sealed Zorglub.Time.Core.Schemas.EgyptianSchema.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
override sealed Zorglub.Time.Core.Schemas.GJSchema.CountDaysInMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.GJSchema.CountDaysInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.GJSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.GJSchema.CountMonthsInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.GJSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.GJSchema.Family.get -> Zorglub.Time.CalendricalFamily
override sealed Zorglub.Time.Core.Schemas.GJSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.GJSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Zorglub.Time.Core.Schemas.GJSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Zorglub.Time.Core.Schemas.GJSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.GJSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Zorglub.Time.Core.Schemas.GJSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.GJSchema.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
override sealed Zorglub.Time.Core.Schemas.GregorianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Zorglub.Time.Core.Schemas.GregorianSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.GregorianSchema.GetStartOfYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.GregorianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Zorglub.Time.Core.Schemas.GregorianSchema.IsLeapYear(int y) -> bool
override sealed Zorglub.Time.Core.Schemas.JulianSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Zorglub.Time.Core.Schemas.JulianSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.JulianSchema.GetStartOfYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.JulianSchema.GetYear(int daysSinceEpoch) -> int
override sealed Zorglub.Time.Core.Schemas.JulianSchema.IsLeapYear(int y) -> bool
override sealed Zorglub.Time.Core.Schemas.PtolemaicSchema.CountDaysInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.PtolemaicSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.PtolemaicSchema.Family.get -> Zorglub.Time.CalendricalFamily
override sealed Zorglub.Time.Core.Schemas.PtolemaicSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Zorglub.Time.Core.Schemas.PtolemaicSchema.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.CountDaysInMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.CountDaysInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.CountMonthsInYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.CountMonthsSinceEpoch(int y, int m) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.Family.get -> Zorglub.Time.CalendricalFamily
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.GetDatePartsAtEndOfYear(int y, out int m, out int d) -> void
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.GetMonth(int y, int doy, out int d) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.GetStartOfYear(int y) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.GetYear(int daysSinceEpoch) -> int
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.IsIntercalaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.IsIntercalaryMonth(int y, int m) -> bool
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.IsLeapYear(int y) -> bool
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.IsSupplementaryDay(int y, int m, int d) -> bool
override sealed Zorglub.Time.Core.Schemas.TabularIslamicSchema.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
override sealed Zorglub.Time.Core.SystemSchema.IsRegular(out int monthsInYear) -> bool
override sealed Zorglub.Time.Core.SystemSegment.ToString() -> string!
override sealed Zorglub.Time.Core.Validation.DaysValidator.ToString() -> string!
override sealed Zorglub.Time.Core.Validation.MonthsValidator.ToString() -> string!
override sealed Zorglub.Time.Core.Validation.YearsValidator.ToString() -> string!
override sealed Zorglub.Time.Hemerology.MinMaxYearBasicCalendar.CountDaysInMonth(int year, int month) -> int
override sealed Zorglub.Time.Hemerology.MinMaxYearBasicCalendar.CountDaysInYear(int year) -> int
override sealed Zorglub.Time.Hemerology.MinMaxYearBasicCalendar.CountMonthsInYear(int year) -> int
override sealed Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.ValidateYearMonth(int year, int month, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.ProlepticScope.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.ProlepticScope.ValidateYearMonth(int year, int month, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.ProlepticScope.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.StandardScope.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.StandardScope.ValidateYearMonth(int year, int month, string? paramName = null) -> void
override sealed Zorglub.Time.Hemerology.Scopes.StandardScope.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
override sealed Zorglub.Time.Simple.SimpleCalendar.ToString() -> string!
override Zorglub.Time.Core.Intervals.LowerRay<T>.Equals(object? obj) -> bool
override Zorglub.Time.Core.Intervals.LowerRay<T>.GetHashCode() -> int
override Zorglub.Time.Core.Intervals.LowerRay<T>.ToString() -> string!
override Zorglub.Time.Core.Intervals.Range<T>.Equals(object? obj) -> bool
override Zorglub.Time.Core.Intervals.Range<T>.GetHashCode() -> int
override Zorglub.Time.Core.Intervals.Range<T>.ToString() -> string!
override Zorglub.Time.Core.Intervals.RangeSet<T>.Equals(object? obj) -> bool
override Zorglub.Time.Core.Intervals.RangeSet<T>.GetHashCode() -> int
override Zorglub.Time.Core.Intervals.RangeSet<T>.ToString() -> string!
override Zorglub.Time.Core.Intervals.UpperRay<T>.Equals(object? obj) -> bool
override Zorglub.Time.Core.Intervals.UpperRay<T>.GetHashCode() -> int
override Zorglub.Time.Core.Intervals.UpperRay<T>.ToString() -> string!
override Zorglub.Time.Core.Utilities.OrderedPair<T>.Equals(object? obj) -> bool
override Zorglub.Time.Core.Utilities.OrderedPair<T>.GetHashCode() -> int
override Zorglub.Time.Core.Utilities.OrderedPair<T>.ToString() -> string!
override Zorglub.Time.Core.Yedoy.Equals(object? obj) -> bool
override Zorglub.Time.Core.Yedoy.GetHashCode() -> int
override Zorglub.Time.Core.Yedoy.ToString() -> string!
override Zorglub.Time.Core.Yedoyx.Equals(object? obj) -> bool
override Zorglub.Time.Core.Yedoyx.GetHashCode() -> int
override Zorglub.Time.Core.Yedoyx.ToString() -> string!
override Zorglub.Time.Core.Yemo.Equals(object? obj) -> bool
override Zorglub.Time.Core.Yemo.GetHashCode() -> int
override Zorglub.Time.Core.Yemo.ToString() -> string!
override Zorglub.Time.Core.Yemoda.Equals(object? obj) -> bool
override Zorglub.Time.Core.Yemoda.GetHashCode() -> int
override Zorglub.Time.Core.Yemoda.ToString() -> string!
override Zorglub.Time.Core.Yemodax.Equals(object? obj) -> bool
override Zorglub.Time.Core.Yemodax.GetHashCode() -> int
override Zorglub.Time.Core.Yemodax.ToString() -> string!
override Zorglub.Time.Core.Yemox.Equals(object? obj) -> bool
override Zorglub.Time.Core.Yemox.GetHashCode() -> int
override Zorglub.Time.Core.Yemox.ToString() -> string!
override Zorglub.Time.DayNumber.Equals(object? obj) -> bool
override Zorglub.Time.DayNumber.GetHashCode() -> int
override Zorglub.Time.DayNumber.ToString() -> string!
override Zorglub.Time.Hemerology.BasicCalendar<TScope>.ToString() -> string!
override Zorglub.Time.Ord.Equals(object? obj) -> bool
override Zorglub.Time.Ord.GetHashCode() -> int
override Zorglub.Time.Ord.ToString() -> string!
override Zorglub.Time.Simple.CalendarDate.Equals(object? obj) -> bool
override Zorglub.Time.Simple.CalendarDate.GetHashCode() -> int
override Zorglub.Time.Simple.CalendarDate.ToString() -> string!
override Zorglub.Time.Simple.CalendarDay.Equals(object? obj) -> bool
override Zorglub.Time.Simple.CalendarDay.GetHashCode() -> int
override Zorglub.Time.Simple.CalendarDay.ToString() -> string!
override Zorglub.Time.Simple.CalendarMonth.Equals(object? obj) -> bool
override Zorglub.Time.Simple.CalendarMonth.GetHashCode() -> int
override Zorglub.Time.Simple.CalendarMonth.ToString() -> string!
override Zorglub.Time.Simple.CalendarYear.Equals(object? obj) -> bool
override Zorglub.Time.Simple.CalendarYear.GetHashCode() -> int
override Zorglub.Time.Simple.CalendarYear.ToString() -> string!
override Zorglub.Time.Simple.OrdinalDate.Equals(object? obj) -> bool
override Zorglub.Time.Simple.OrdinalDate.GetHashCode() -> int
override Zorglub.Time.Simple.OrdinalDate.ToString() -> string!
override Zorglub.Time.Specialized.CivilDate.Equals(object? obj) -> bool
override Zorglub.Time.Specialized.CivilDate.GetHashCode() -> int
override Zorglub.Time.Specialized.CivilDate.ToString() -> string!
override Zorglub.Time.Specialized.GregorianDate.Equals(object? obj) -> bool
override Zorglub.Time.Specialized.GregorianDate.GetHashCode() -> int
override Zorglub.Time.Specialized.GregorianDate.ToString() -> string!
override Zorglub.Time.Specialized.JulianDate.Equals(object? obj) -> bool
override Zorglub.Time.Specialized.JulianDate.GetHashCode() -> int
override Zorglub.Time.Specialized.JulianDate.ToString() -> string!
static Zorglub.Time.Core.CalendricalSegment.Create(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.Core.Intervals.Range<int> supportedYears) -> Zorglub.Time.Core.CalendricalSegment!
static Zorglub.Time.Core.CalendricalSegment.CreateMaximal(Zorglub.Time.Core.ICalendricalSchema! schema) -> Zorglub.Time.Core.CalendricalSegment!
static Zorglub.Time.Core.CalendricalSegment.CreateMaximalOnOrAfterYear1(Zorglub.Time.Core.ICalendricalSchema! schema) -> Zorglub.Time.Core.CalendricalSegment!
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.LowerRay<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.LowerRay<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.Range<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Adjacent(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Coalesce(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.LowerRay<int> y) -> Zorglub.Time.Core.Intervals.LowerRay<int>?
static Zorglub.Time.Core.Intervals.Interval.Coalesce(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.Range<int> y) -> Zorglub.Time.Core.Intervals.Range<int>?
static Zorglub.Time.Core.Intervals.Interval.Coalesce(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> Zorglub.Time.Core.Intervals.UpperRay<int>?
static Zorglub.Time.Core.Intervals.Interval.Coalesce(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber>?
static Zorglub.Time.Core.Intervals.Interval.Coalesce(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>?
static Zorglub.Time.Core.Intervals.Interval.Coalesce(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber>?
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.LowerRay<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.LowerRay<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.Range<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Connected(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Disjoint<T>(Zorglub.Time.Core.Intervals.LowerRay<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Disjoint<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.LowerRay<T> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Disjoint<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.Range<T> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Disjoint<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> bool
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.LowerRay<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> Zorglub.Time.Core.Intervals.RangeSet<int>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.RangeSet<Zorglub.Time.DayNumber>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.LowerRay<int> y) -> Zorglub.Time.Core.Intervals.RangeSet<int>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.Range<int> y) -> Zorglub.Time.Core.Intervals.RangeSet<int>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.Range<int> x, Zorglub.Time.Core.Intervals.UpperRay<int> y) -> Zorglub.Time.Core.Intervals.RangeSet<int>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.RangeSet<Zorglub.Time.DayNumber>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.RangeSet<Zorglub.Time.DayNumber>
static Zorglub.Time.Core.Intervals.Interval.Gap(Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> x, Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> y) -> Zorglub.Time.Core.Intervals.RangeSet<Zorglub.Time.DayNumber>
static Zorglub.Time.Core.Intervals.Interval.Intersect<T>(Zorglub.Time.Core.Intervals.LowerRay<T> x, Zorglub.Time.Core.Intervals.LowerRay<T> y) -> Zorglub.Time.Core.Intervals.LowerRay<T>
static Zorglub.Time.Core.Intervals.Interval.Intersect<T>(Zorglub.Time.Core.Intervals.LowerRay<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.Interval.Intersect<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.LowerRay<T> y) -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.Interval.Intersect<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.Range<T> y) -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.Interval.Intersect<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.Interval.Intersect<T>(Zorglub.Time.Core.Intervals.UpperRay<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> Zorglub.Time.Core.Intervals.UpperRay<T>
static Zorglub.Time.Core.Intervals.Interval.Span<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.LowerRay<T> y) -> Zorglub.Time.Core.Intervals.LowerRay<T>
static Zorglub.Time.Core.Intervals.Interval.Span<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.Range<T> y) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Interval.Span<T>(Zorglub.Time.Core.Intervals.Range<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> Zorglub.Time.Core.Intervals.UpperRay<T>
static Zorglub.Time.Core.Intervals.Interval.Union<T>(Zorglub.Time.Core.Intervals.LowerRay<T> x, Zorglub.Time.Core.Intervals.LowerRay<T> y) -> Zorglub.Time.Core.Intervals.LowerRay<T>
static Zorglub.Time.Core.Intervals.Interval.Union<T>(Zorglub.Time.Core.Intervals.UpperRay<T> x, Zorglub.Time.Core.Intervals.UpperRay<T> y) -> Zorglub.Time.Core.Intervals.UpperRay<T>
static Zorglub.Time.Core.Intervals.LowerRay.Complement(this Zorglub.Time.Core.Intervals.LowerRay<int> ray) -> Zorglub.Time.Core.Intervals.UpperRay<int>
static Zorglub.Time.Core.Intervals.LowerRay.Complement(this Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber> ray) -> Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber>
static Zorglub.Time.Core.Intervals.LowerRay.EndingAt<T>(T max) -> Zorglub.Time.Core.Intervals.LowerRay<T>
static Zorglub.Time.Core.Intervals.LowerRay<T>.operator !=(Zorglub.Time.Core.Intervals.LowerRay<T> left, Zorglub.Time.Core.Intervals.LowerRay<T> right) -> bool
static Zorglub.Time.Core.Intervals.LowerRay<T>.operator ==(Zorglub.Time.Core.Intervals.LowerRay<T> left, Zorglub.Time.Core.Intervals.LowerRay<T> right) -> bool
static Zorglub.Time.Core.Intervals.Range.Count(this Zorglub.Time.Core.Intervals.Range<int> range) -> int
static Zorglub.Time.Core.Intervals.Range.Count(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> range) -> int
static Zorglub.Time.Core.Intervals.Range.Create<T>(T min, T max) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.EndingAt<T>(T max) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.EndingAt<T>(T max, int length) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.FromEndpoints<T>(Zorglub.Time.Core.Utilities.OrderedPair<T> endpoints) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.LongCount(this Zorglub.Time.Core.Intervals.Range<int> range) -> long
static Zorglub.Time.Core.Intervals.Range.LongCount(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> range) -> long
static Zorglub.Time.Core.Intervals.Range.Maximal<T>() -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.Singleton<T>(T value) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.StartingAt<T>(T min) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.StartingAt<T>(T min, int length) -> Zorglub.Time.Core.Intervals.Range<T>
static Zorglub.Time.Core.Intervals.Range.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<int> range) -> System.Collections.Generic.IEnumerable<int>!
static Zorglub.Time.Core.Intervals.Range.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> range) -> System.Collections.Generic.IEnumerable<Zorglub.Time.DayNumber>!
static Zorglub.Time.Core.Intervals.Range<T>.operator !=(Zorglub.Time.Core.Intervals.Range<T> left, Zorglub.Time.Core.Intervals.Range<T> right) -> bool
static Zorglub.Time.Core.Intervals.Range<T>.operator ==(Zorglub.Time.Core.Intervals.Range<T> left, Zorglub.Time.Core.Intervals.Range<T> right) -> bool
static Zorglub.Time.Core.Intervals.RangeSet.Create<T>(T min, T max) -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.RangeSet.Empty<T>() -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.RangeSet.FromEndpoints<T>(Zorglub.Time.Core.Utilities.OrderedPair<T> endpoints) -> Zorglub.Time.Core.Intervals.RangeSet<T>
static Zorglub.Time.Core.Intervals.RangeSet<T>.operator !=(Zorglub.Time.Core.Intervals.RangeSet<T> left, Zorglub.Time.Core.Intervals.RangeSet<T> right) -> bool
static Zorglub.Time.Core.Intervals.RangeSet<T>.operator ==(Zorglub.Time.Core.Intervals.RangeSet<T> left, Zorglub.Time.Core.Intervals.RangeSet<T> right) -> bool
static Zorglub.Time.Core.Intervals.UpperRay.Complement(this Zorglub.Time.Core.Intervals.UpperRay<int> ray) -> Zorglub.Time.Core.Intervals.LowerRay<int>
static Zorglub.Time.Core.Intervals.UpperRay.Complement(this Zorglub.Time.Core.Intervals.UpperRay<Zorglub.Time.DayNumber> ray) -> Zorglub.Time.Core.Intervals.LowerRay<Zorglub.Time.DayNumber>
static Zorglub.Time.Core.Intervals.UpperRay.StartingAt<T>(T min) -> Zorglub.Time.Core.Intervals.UpperRay<T>
static Zorglub.Time.Core.Intervals.UpperRay<T>.operator !=(Zorglub.Time.Core.Intervals.UpperRay<T> left, Zorglub.Time.Core.Intervals.UpperRay<T> right) -> bool
static Zorglub.Time.Core.Intervals.UpperRay<T>.operator ==(Zorglub.Time.Core.Intervals.UpperRay<T> left, Zorglub.Time.Core.Intervals.UpperRay<T> right) -> bool
static Zorglub.Time.Core.Schemas.CivilSchema.GetInstance() -> Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Schemas.CivilSchema!>!
static Zorglub.Time.Core.Schemas.Coptic12Schema.GetInstance() -> Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Schemas.Coptic12Schema!>!
static Zorglub.Time.Core.Schemas.Egyptian12Schema.GetInstance() -> Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Schemas.Egyptian12Schema!>!
static Zorglub.Time.Core.Schemas.GregorianSchema.GetInstance() -> Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Schemas.GregorianSchema!>!
static Zorglub.Time.Core.Schemas.JulianSchema.GetInstance() -> Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Schemas.JulianSchema!>!
static Zorglub.Time.Core.Schemas.TabularIslamicSchema.GetInstance() -> Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Schemas.TabularIslamicSchema!>!
static Zorglub.Time.Core.SystemArithmetic.CreateDefault(Zorglub.Time.Core.SystemSegment! segment) -> Zorglub.Time.Core.SystemArithmetic!
static Zorglub.Time.Core.SystemSchema.DefaultSupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
static Zorglub.Time.Core.SystemSchema.MaxSupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
static Zorglub.Time.Core.SystemSegment.Create(Zorglub.Time.Core.SystemSchema! schema, Zorglub.Time.Core.Intervals.Range<int> supportedYears) -> Zorglub.Time.Core.SystemSegment!
static Zorglub.Time.Core.SystemSegment.FromCalendricalSegment(Zorglub.Time.Core.CalendricalSegment! segment) -> Zorglub.Time.Core.SystemSegment!
static Zorglub.Time.Core.Utilities.Box.Create<T>(T? obj) -> Zorglub.Time.Core.Utilities.Box<T!>!
static Zorglub.Time.Core.Utilities.Box.Empty<T>() -> Zorglub.Time.Core.Utilities.Box<T!>!
static Zorglub.Time.Core.Utilities.Box.Flatten<T>(this Zorglub.Time.Core.Utilities.Box<Zorglub.Time.Core.Utilities.Box<T!>!>! square) -> Zorglub.Time.Core.Utilities.Box<T!>!
static Zorglub.Time.Core.Utilities.OrderedPair.Create<T>(T x, T y) -> Zorglub.Time.Core.Utilities.OrderedPair<T>
static Zorglub.Time.Core.Utilities.OrderedPair<T>.operator !=(Zorglub.Time.Core.Utilities.OrderedPair<T> left, Zorglub.Time.Core.Utilities.OrderedPair<T> right) -> bool
static Zorglub.Time.Core.Utilities.OrderedPair<T>.operator ==(Zorglub.Time.Core.Utilities.OrderedPair<T> left, Zorglub.Time.Core.Utilities.OrderedPair<T> right) -> bool
static Zorglub.Time.Core.Validation.DomainExtensions.CheckLowerBound(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> domain, Zorglub.Time.DayNumber dayNumber) -> void
static Zorglub.Time.Core.Validation.DomainExtensions.CheckOverflow(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> domain, Zorglub.Time.DayNumber dayNumber) -> void
static Zorglub.Time.Core.Validation.DomainExtensions.CheckUpperBound(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> domain, Zorglub.Time.DayNumber dayNumber) -> void
static Zorglub.Time.Core.Validation.DomainExtensions.Validate(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber> domain, Zorglub.Time.DayNumber dayNumber, string? paramName = null) -> void
static Zorglub.Time.Core.Yedoy.Create(int year, int dayOfYear) -> Zorglub.Time.Core.Yedoy
static Zorglub.Time.Core.Yedoy.FromBinary(int data) -> Zorglub.Time.Core.Yedoy
static Zorglub.Time.Core.Yedoy.MaxValue.get -> Zorglub.Time.Core.Yedoy
static Zorglub.Time.Core.Yedoy.MinValue.get -> Zorglub.Time.Core.Yedoy
static Zorglub.Time.Core.Yedoy.operator !=(Zorglub.Time.Core.Yedoy left, Zorglub.Time.Core.Yedoy right) -> bool
static Zorglub.Time.Core.Yedoy.operator <(Zorglub.Time.Core.Yedoy left, Zorglub.Time.Core.Yedoy right) -> bool
static Zorglub.Time.Core.Yedoy.operator <=(Zorglub.Time.Core.Yedoy left, Zorglub.Time.Core.Yedoy right) -> bool
static Zorglub.Time.Core.Yedoy.operator ==(Zorglub.Time.Core.Yedoy left, Zorglub.Time.Core.Yedoy right) -> bool
static Zorglub.Time.Core.Yedoy.operator >(Zorglub.Time.Core.Yedoy left, Zorglub.Time.Core.Yedoy right) -> bool
static Zorglub.Time.Core.Yedoy.operator >=(Zorglub.Time.Core.Yedoy left, Zorglub.Time.Core.Yedoy right) -> bool
static Zorglub.Time.Core.Yedoyx.Create(int year, int dayOfYear, int extra) -> Zorglub.Time.Core.Yedoyx
static Zorglub.Time.Core.Yedoyx.Create(Zorglub.Time.Core.Yedoy ydoy, int extra) -> Zorglub.Time.Core.Yedoyx
static Zorglub.Time.Core.Yedoyx.FromBinary(int data) -> Zorglub.Time.Core.Yedoyx
static Zorglub.Time.Core.Yedoyx.MaxValue.get -> Zorglub.Time.Core.Yedoyx
static Zorglub.Time.Core.Yedoyx.MinValue.get -> Zorglub.Time.Core.Yedoyx
static Zorglub.Time.Core.Yedoyx.operator !=(Zorglub.Time.Core.Yedoyx left, Zorglub.Time.Core.Yedoyx right) -> bool
static Zorglub.Time.Core.Yedoyx.operator ==(Zorglub.Time.Core.Yedoyx left, Zorglub.Time.Core.Yedoyx right) -> bool
static Zorglub.Time.Core.Yemo.Create(int year, int month) -> Zorglub.Time.Core.Yemo
static Zorglub.Time.Core.Yemo.FromBinary(int data) -> Zorglub.Time.Core.Yemo
static Zorglub.Time.Core.Yemo.operator !=(Zorglub.Time.Core.Yemo left, Zorglub.Time.Core.Yemo right) -> bool
static Zorglub.Time.Core.Yemo.operator <(Zorglub.Time.Core.Yemo left, Zorglub.Time.Core.Yemo right) -> bool
static Zorglub.Time.Core.Yemo.operator <=(Zorglub.Time.Core.Yemo left, Zorglub.Time.Core.Yemo right) -> bool
static Zorglub.Time.Core.Yemo.operator ==(Zorglub.Time.Core.Yemo left, Zorglub.Time.Core.Yemo right) -> bool
static Zorglub.Time.Core.Yemo.operator >(Zorglub.Time.Core.Yemo left, Zorglub.Time.Core.Yemo right) -> bool
static Zorglub.Time.Core.Yemo.operator >=(Zorglub.Time.Core.Yemo left, Zorglub.Time.Core.Yemo right) -> bool
static Zorglub.Time.Core.Yemoda.Create(int year, int month, int day) -> Zorglub.Time.Core.Yemoda
static Zorglub.Time.Core.Yemoda.FromBinary(int data) -> Zorglub.Time.Core.Yemoda
static Zorglub.Time.Core.Yemoda.FromBinary(long data, out uint extraData) -> Zorglub.Time.Core.Yemoda
static Zorglub.Time.Core.Yemoda.MaxValue.get -> Zorglub.Time.Core.Yemoda
static Zorglub.Time.Core.Yemoda.MinValue.get -> Zorglub.Time.Core.Yemoda
static Zorglub.Time.Core.Yemoda.operator !=(Zorglub.Time.Core.Yemoda left, Zorglub.Time.Core.Yemoda right) -> bool
static Zorglub.Time.Core.Yemoda.operator <(Zorglub.Time.Core.Yemoda left, Zorglub.Time.Core.Yemoda right) -> bool
static Zorglub.Time.Core.Yemoda.operator <=(Zorglub.Time.Core.Yemoda left, Zorglub.Time.Core.Yemoda right) -> bool
static Zorglub.Time.Core.Yemoda.operator ==(Zorglub.Time.Core.Yemoda left, Zorglub.Time.Core.Yemoda right) -> bool
static Zorglub.Time.Core.Yemoda.operator >(Zorglub.Time.Core.Yemoda left, Zorglub.Time.Core.Yemoda right) -> bool
static Zorglub.Time.Core.Yemoda.operator >=(Zorglub.Time.Core.Yemoda left, Zorglub.Time.Core.Yemoda right) -> bool
static Zorglub.Time.Core.Yemoda.SupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
static Zorglub.Time.Core.Yemodax.Create(int year, int month, int day, int extra) -> Zorglub.Time.Core.Yemodax
static Zorglub.Time.Core.Yemodax.Create(Zorglub.Time.Core.Yemoda ymd, int extra) -> Zorglub.Time.Core.Yemodax
static Zorglub.Time.Core.Yemodax.FromBinary(int data) -> Zorglub.Time.Core.Yemodax
static Zorglub.Time.Core.Yemodax.MaxValue.get -> Zorglub.Time.Core.Yemodax
static Zorglub.Time.Core.Yemodax.MinValue.get -> Zorglub.Time.Core.Yemodax
static Zorglub.Time.Core.Yemodax.operator !=(Zorglub.Time.Core.Yemodax left, Zorglub.Time.Core.Yemodax right) -> bool
static Zorglub.Time.Core.Yemodax.operator ==(Zorglub.Time.Core.Yemodax left, Zorglub.Time.Core.Yemodax right) -> bool
static Zorglub.Time.Core.Yemox.Create(int year, int month, int extra) -> Zorglub.Time.Core.Yemox
static Zorglub.Time.Core.Yemox.Create(Zorglub.Time.Core.Yemo ym, int extra) -> Zorglub.Time.Core.Yemox
static Zorglub.Time.Core.Yemox.FromBinary(int data) -> Zorglub.Time.Core.Yemox
static Zorglub.Time.Core.Yemox.operator !=(Zorglub.Time.Core.Yemox left, Zorglub.Time.Core.Yemox right) -> bool
static Zorglub.Time.Core.Yemox.operator ==(Zorglub.Time.Core.Yemox left, Zorglub.Time.Core.Yemox right) -> bool
static Zorglub.Time.DateParts.AtStartOfMonth(int y, int m) -> Zorglub.Time.DateParts
static Zorglub.Time.DateParts.AtStartOfYear(int y) -> Zorglub.Time.DateParts
static Zorglub.Time.DateParts.operator <(Zorglub.Time.DateParts left, Zorglub.Time.DateParts right) -> bool
static Zorglub.Time.DateParts.operator <=(Zorglub.Time.DateParts left, Zorglub.Time.DateParts right) -> bool
static Zorglub.Time.DateParts.operator >(Zorglub.Time.DateParts left, Zorglub.Time.DateParts right) -> bool
static Zorglub.Time.DateParts.operator >=(Zorglub.Time.DateParts left, Zorglub.Time.DateParts right) -> bool
static Zorglub.Time.DayNumber.FromGregorianOrdinalParts(int year, int dayOfYear) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.FromGregorianParts(int year, int month, int day) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.FromJulianOrdinalParts(int year, int dayOfYear) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.FromJulianParts(int year, int month, int day) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.GregorianDomain.get -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>
static Zorglub.Time.DayNumber.JulianDomain.get -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>
static Zorglub.Time.DayNumber.Max(Zorglub.Time.DayNumber x, Zorglub.Time.DayNumber y) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.MaxValue.get -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.Min(Zorglub.Time.DayNumber x, Zorglub.Time.DayNumber y) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.MinValue.get -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.operator !=(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> bool
static Zorglub.Time.DayNumber.operator +(Zorglub.Time.DayNumber value, int days) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.operator ++(Zorglub.Time.DayNumber value) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.operator -(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> int
static Zorglub.Time.DayNumber.operator -(Zorglub.Time.DayNumber value, int days) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.operator --(Zorglub.Time.DayNumber value) -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.operator <(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> bool
static Zorglub.Time.DayNumber.operator <=(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> bool
static Zorglub.Time.DayNumber.operator ==(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> bool
static Zorglub.Time.DayNumber.operator >(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> bool
static Zorglub.Time.DayNumber.operator >=(Zorglub.Time.DayNumber left, Zorglub.Time.DayNumber right) -> bool
static Zorglub.Time.DayNumber.Today() -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.UtcToday() -> Zorglub.Time.DayNumber
static Zorglub.Time.DayNumber.Zero.get -> Zorglub.Time.DayNumber
static Zorglub.Time.DayZero.NewStyle.get -> Zorglub.Time.DayNumber
static Zorglub.Time.DayZero.OldStyle.get -> Zorglub.Time.DayNumber
static Zorglub.Time.DayZero.RataDie.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Extensions.Unboxing.TryUnbox<T>(this Zorglub.Time.Core.Utilities.Box<T!>! box, out T? obj) -> bool
static Zorglub.Time.Extensions.Unboxing.Unbox<T>(this Zorglub.Time.Core.Utilities.Box<T!>! box) -> T!
static Zorglub.Time.Hemerology.CalendarEpoch.Armenian.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.Coptic.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.Egyptian.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.Ethiopic.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.FrenchRepublican.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.Persian.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.Positivist.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.SundayBeforeGregorian.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.TabularIslamic.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.CalendarEpoch.Zoroastrian.get -> Zorglub.Time.DayNumber
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.Create(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch, Zorglub.Time.Core.Intervals.Range<int> supportedYears) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.Create(Zorglub.Time.Hemerology.Scopes.CalendarScope! scope) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.Create(Zorglub.Time.Hemerology.Scopes.ProlepticScope! scope) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.Create(Zorglub.Time.Hemerology.Scopes.StandardScope! scope) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.CreateMaximal(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.CreateMaximalOnOrAfterYear1(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.EndingAt(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch, int year) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.MinMaxYearScope.StartingAt(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch, int year) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.ProlepticScope.implicit operator Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!(Zorglub.Time.Hemerology.Scopes.ProlepticScope! scope) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.Scopes.StandardScope.implicit operator Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!(Zorglub.Time.Hemerology.Scopes.StandardScope! scope) -> Zorglub.Time.Hemerology.Scopes.MinMaxYearScope!
static Zorglub.Time.Hemerology.YearNumbering.GetCentury(int year) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetCentury(int year, out int yearOfCentury) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetDecade(int year, out int yearOfDecade) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetDecadeOfCentury(int year, out int century, out int yearOfDecade) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetIsoCentury(int year, out int yearOfCentury) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetIsoDecade(int year, out int yearOfDecade) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetIsoDecadeOfCentury(int year, out int century, out int yearOfDecade) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetIsoMillennium(int year, out int yearOfMillennium) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetMillennium(int year, out int yearOfMillennium) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearFromCentury(int century, int yearOfCentury) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearFromDecade(int decade, int yearOfDecade) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearFromIsoCentury(int century, int yearOfCentury) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearFromIsoDecade(int decade, int yearOfDecade) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearFromIsoMillennium(int millennium, int yearOfMillennium) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearFromMillennium(int millennium, int yearOfMillennium) -> int
static Zorglub.Time.Hemerology.YearNumbering.GetYearOfCentury(int year) -> int
static Zorglub.Time.IsoWeekdayExtensions.ToDayOfWeek(this Zorglub.Time.IsoWeekday isoWeekday) -> System.DayOfWeek
static Zorglub.Time.IsoWeekdayExtensions.ToIsoWeekday(this System.DayOfWeek dayOfWeek) -> Zorglub.Time.IsoWeekday
static Zorglub.Time.MonthParts.AtStartOfYear(int y) -> Zorglub.Time.MonthParts
static Zorglub.Time.MonthParts.operator <(Zorglub.Time.MonthParts left, Zorglub.Time.MonthParts right) -> bool
static Zorglub.Time.MonthParts.operator <=(Zorglub.Time.MonthParts left, Zorglub.Time.MonthParts right) -> bool
static Zorglub.Time.MonthParts.operator >(Zorglub.Time.MonthParts left, Zorglub.Time.MonthParts right) -> bool
static Zorglub.Time.MonthParts.operator >=(Zorglub.Time.MonthParts left, Zorglub.Time.MonthParts right) -> bool
static Zorglub.Time.Ord.explicit operator int(Zorglub.Time.Ord ord) -> int
static Zorglub.Time.Ord.First.get -> Zorglub.Time.Ord
static Zorglub.Time.Ord.FromInt32(int value) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.FromRank(int rank) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.Max(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.MaxValue.get -> Zorglub.Time.Ord
static Zorglub.Time.Ord.Min(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.MinValue.get -> Zorglub.Time.Ord
static Zorglub.Time.Ord.operator !=(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> bool
static Zorglub.Time.Ord.operator +(Zorglub.Time.Ord ord, int num) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.operator ++(Zorglub.Time.Ord ord) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.operator -(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> int
static Zorglub.Time.Ord.operator -(Zorglub.Time.Ord ord) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.operator -(Zorglub.Time.Ord ord, int num) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.operator --(Zorglub.Time.Ord ord) -> Zorglub.Time.Ord
static Zorglub.Time.Ord.operator <(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> bool
static Zorglub.Time.Ord.operator <=(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> bool
static Zorglub.Time.Ord.operator ==(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> bool
static Zorglub.Time.Ord.operator >(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> bool
static Zorglub.Time.Ord.operator >=(Zorglub.Time.Ord left, Zorglub.Time.Ord right) -> bool
static Zorglub.Time.Ord.Zeroth.get -> Zorglub.Time.Ord
static Zorglub.Time.OrdinalParts.AtStartOfYear(int y) -> Zorglub.Time.OrdinalParts
static Zorglub.Time.OrdinalParts.operator <(Zorglub.Time.OrdinalParts left, Zorglub.Time.OrdinalParts right) -> bool
static Zorglub.Time.OrdinalParts.operator <=(Zorglub.Time.OrdinalParts left, Zorglub.Time.OrdinalParts right) -> bool
static Zorglub.Time.OrdinalParts.operator >(Zorglub.Time.OrdinalParts left, Zorglub.Time.OrdinalParts right) -> bool
static Zorglub.Time.OrdinalParts.operator >=(Zorglub.Time.OrdinalParts left, Zorglub.Time.OrdinalParts right) -> bool
static Zorglub.Time.Simple.BoxExtensions.CreateCalendar<TSchema>(this Zorglub.Time.Core.Utilities.Box<TSchema!>! schema, string! key, Zorglub.Time.DayNumber epoch, bool proleptic = false) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.BoxExtensions.GetOrCreateCalendar<TSchema>(this Zorglub.Time.Core.Utilities.Box<TSchema!>! schema, string! key, Zorglub.Time.DayNumber epoch, bool proleptic = false) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.BoxExtensions.TryCreateCalendar<TSchema>(this Zorglub.Time.Core.Utilities.Box<TSchema!>! schema, string! key, Zorglub.Time.DayNumber epoch, out Zorglub.Time.Simple.SimpleCalendar? calendar, bool proleptic = false) -> bool
static Zorglub.Time.Simple.CalendarDate.FromBinary(int data) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.FromDayNumber(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.Max(Zorglub.Time.Simple.CalendarDate x, Zorglub.Time.Simple.CalendarDate y) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.Min(Zorglub.Time.Simple.CalendarDate x, Zorglub.Time.Simple.CalendarDate y) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.operator !=(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> bool
static Zorglub.Time.Simple.CalendarDate.operator +(Zorglub.Time.Simple.CalendarDate value, int days) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.operator ++(Zorglub.Time.Simple.CalendarDate value) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.operator -(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> int
static Zorglub.Time.Simple.CalendarDate.operator -(Zorglub.Time.Simple.CalendarDate value, int days) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.operator --(Zorglub.Time.Simple.CalendarDate value) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDate.operator <(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> bool
static Zorglub.Time.Simple.CalendarDate.operator <=(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> bool
static Zorglub.Time.Simple.CalendarDate.operator ==(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> bool
static Zorglub.Time.Simple.CalendarDate.operator >(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> bool
static Zorglub.Time.Simple.CalendarDate.operator >=(Zorglub.Time.Simple.CalendarDate left, Zorglub.Time.Simple.CalendarDate right) -> bool
static Zorglub.Time.Simple.CalendarDate.Today() -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.GetEndOfMonth(this Zorglub.Time.Simple.CalendarDate date) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.GetEndOfYear(this Zorglub.Time.Simple.CalendarDate date) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.GetStartOfMonth(this Zorglub.Time.Simple.CalendarDate date) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.GetStartOfYear(this Zorglub.Time.Simple.CalendarDate date) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.WithDay(this Zorglub.Time.Simple.CalendarDate date, int newDay) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.WithDayOfYear(this Zorglub.Time.Simple.CalendarDate date, int newDayOfYear) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.WithMonth(this Zorglub.Time.Simple.CalendarDate date, int newMonth) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateAdjusters.WithYear(this Zorglub.Time.Simple.CalendarDate date, int newYear) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.ConvertToRange(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate>
static Zorglub.Time.Simple.CalendarDateProviders.ConvertToRange(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate>
static Zorglub.Time.Simple.CalendarDateProviders.GetDayOfMonth(Zorglub.Time.Simple.CalendarMonth month, int dayOfMonth) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetDayOfYear(Zorglub.Time.Simple.CalendarYear year, int dayOfYear) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetDaysInMonth(Zorglub.Time.Simple.CalendarMonth month) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDate>!
static Zorglub.Time.Simple.CalendarDateProviders.GetDaysInYear(Zorglub.Time.Simple.CalendarYear year) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDate>!
static Zorglub.Time.Simple.CalendarDateProviders.GetEndOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetEndOfYear(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetEndOfYear(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetStartOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetStartOfYear(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDateProviders.GetStartOfYear(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Simple.CalendarDate
static Zorglub.Time.Simple.CalendarDay.FromBinary(int data) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.Max(Zorglub.Time.Simple.CalendarDay x, Zorglub.Time.Simple.CalendarDay y) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.Min(Zorglub.Time.Simple.CalendarDay x, Zorglub.Time.Simple.CalendarDay y) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.operator !=(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> bool
static Zorglub.Time.Simple.CalendarDay.operator +(Zorglub.Time.Simple.CalendarDay value, int days) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.operator ++(Zorglub.Time.Simple.CalendarDay value) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.operator -(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> int
static Zorglub.Time.Simple.CalendarDay.operator -(Zorglub.Time.Simple.CalendarDay value, int days) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.operator --(Zorglub.Time.Simple.CalendarDay value) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDay.operator <(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> bool
static Zorglub.Time.Simple.CalendarDay.operator <=(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> bool
static Zorglub.Time.Simple.CalendarDay.operator ==(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> bool
static Zorglub.Time.Simple.CalendarDay.operator >(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> bool
static Zorglub.Time.Simple.CalendarDay.operator >=(Zorglub.Time.Simple.CalendarDay left, Zorglub.Time.Simple.CalendarDay right) -> bool
static Zorglub.Time.Simple.CalendarDay.Today() -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.GetEndOfMonth(this Zorglub.Time.Simple.CalendarDay date) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.GetEndOfYear(this Zorglub.Time.Simple.CalendarDay date) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.GetStartOfMonth(this Zorglub.Time.Simple.CalendarDay date) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.GetStartOfYear(this Zorglub.Time.Simple.CalendarDay date) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.WithDay(this Zorglub.Time.Simple.CalendarDay date, int newDay) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.WithDayOfYear(this Zorglub.Time.Simple.CalendarDay date, int newDayOfYear) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.WithMonth(this Zorglub.Time.Simple.CalendarDay date, int newMonth) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayAdjusters.WithYear(this Zorglub.Time.Simple.CalendarDay date, int newYear) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.ConvertToRange(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay>
static Zorglub.Time.Simple.CalendarDayProviders.ConvertToRange(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay>
static Zorglub.Time.Simple.CalendarDayProviders.GetDayOfMonth(Zorglub.Time.Simple.CalendarMonth month, int dayOfMonth) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetDayOfYear(Zorglub.Time.Simple.CalendarYear year, int dayOfYear) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetDaysInMonth(Zorglub.Time.Simple.CalendarMonth month) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDay>!
static Zorglub.Time.Simple.CalendarDayProviders.GetDaysInYear(Zorglub.Time.Simple.CalendarYear year) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDay>!
static Zorglub.Time.Simple.CalendarDayProviders.GetEndOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetEndOfYear(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetEndOfYear(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetStartOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetStartOfYear(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarDayProviders.GetStartOfYear(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Simple.CalendarDay
static Zorglub.Time.Simple.CalendarMath.Create(Zorglub.Time.Simple.SimpleCalendar! calendar, Zorglub.Time.AdditionRuleset additionRuleset) -> Zorglub.Time.Simple.CalendarMath!
static Zorglub.Time.Simple.CalendarMonth.FromBinary(int data) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.FromDayNumber(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.GetCurrentMonth() -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.Max(Zorglub.Time.Simple.CalendarMonth x, Zorglub.Time.Simple.CalendarMonth y) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.Min(Zorglub.Time.Simple.CalendarMonth x, Zorglub.Time.Simple.CalendarMonth y) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.operator !=(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> bool
static Zorglub.Time.Simple.CalendarMonth.operator +(Zorglub.Time.Simple.CalendarMonth value, int months) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.operator ++(Zorglub.Time.Simple.CalendarMonth value) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.operator -(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> int
static Zorglub.Time.Simple.CalendarMonth.operator -(Zorglub.Time.Simple.CalendarMonth value, int months) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.operator --(Zorglub.Time.Simple.CalendarMonth value) -> Zorglub.Time.Simple.CalendarMonth
static Zorglub.Time.Simple.CalendarMonth.operator <(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> bool
static Zorglub.Time.Simple.CalendarMonth.operator <=(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> bool
static Zorglub.Time.Simple.CalendarMonth.operator ==(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> bool
static Zorglub.Time.Simple.CalendarMonth.operator >(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> bool
static Zorglub.Time.Simple.CalendarMonth.operator >=(Zorglub.Time.Simple.CalendarMonth left, Zorglub.Time.Simple.CalendarMonth right) -> bool
static Zorglub.Time.Simple.CalendarYear.FromBinary(int data) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.FromDayNumber(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.GetCurrentYear() -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.Max(Zorglub.Time.Simple.CalendarYear x, Zorglub.Time.Simple.CalendarYear y) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.Min(Zorglub.Time.Simple.CalendarYear x, Zorglub.Time.Simple.CalendarYear y) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.operator !=(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> bool
static Zorglub.Time.Simple.CalendarYear.operator +(Zorglub.Time.Simple.CalendarYear value, int years) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.operator ++(Zorglub.Time.Simple.CalendarYear value) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.operator -(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> int
static Zorglub.Time.Simple.CalendarYear.operator -(Zorglub.Time.Simple.CalendarYear value, int years) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.operator --(Zorglub.Time.Simple.CalendarYear value) -> Zorglub.Time.Simple.CalendarYear
static Zorglub.Time.Simple.CalendarYear.operator <(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> bool
static Zorglub.Time.Simple.CalendarYear.operator <=(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> bool
static Zorglub.Time.Simple.CalendarYear.operator ==(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> bool
static Zorglub.Time.Simple.CalendarYear.operator >(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> bool
static Zorglub.Time.Simple.CalendarYear.operator >=(Zorglub.Time.Simple.CalendarYear left, Zorglub.Time.Simple.CalendarYear right) -> bool
static Zorglub.Time.Simple.OrdinalDate.FromBinary(int data) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.FromDayNumber(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.Max(Zorglub.Time.Simple.OrdinalDate x, Zorglub.Time.Simple.OrdinalDate y) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.Min(Zorglub.Time.Simple.OrdinalDate x, Zorglub.Time.Simple.OrdinalDate y) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.operator !=(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> bool
static Zorglub.Time.Simple.OrdinalDate.operator +(Zorglub.Time.Simple.OrdinalDate value, int days) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.operator ++(Zorglub.Time.Simple.OrdinalDate value) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.operator -(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> int
static Zorglub.Time.Simple.OrdinalDate.operator -(Zorglub.Time.Simple.OrdinalDate value, int days) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.operator --(Zorglub.Time.Simple.OrdinalDate value) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDate.operator <(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> bool
static Zorglub.Time.Simple.OrdinalDate.operator <=(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> bool
static Zorglub.Time.Simple.OrdinalDate.operator ==(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> bool
static Zorglub.Time.Simple.OrdinalDate.operator >(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> bool
static Zorglub.Time.Simple.OrdinalDate.operator >=(Zorglub.Time.Simple.OrdinalDate left, Zorglub.Time.Simple.OrdinalDate right) -> bool
static Zorglub.Time.Simple.OrdinalDate.Today() -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.GetEndOfMonth(this Zorglub.Time.Simple.OrdinalDate date) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.GetEndOfYear(this Zorglub.Time.Simple.OrdinalDate date) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.GetStartOfMonth(this Zorglub.Time.Simple.OrdinalDate date) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.GetStartOfYear(this Zorglub.Time.Simple.OrdinalDate date) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.WithDay(this Zorglub.Time.Simple.OrdinalDate date, int newDay) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.WithDayOfYear(this Zorglub.Time.Simple.OrdinalDate date, int newDayOfYear) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.WithMonth(this Zorglub.Time.Simple.OrdinalDate date, int newMonth) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateAdjusters.WithYear(this Zorglub.Time.Simple.OrdinalDate date, int newYear) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.ConvertToRange(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate>
static Zorglub.Time.Simple.OrdinalDateProviders.ConvertToRange(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate>
static Zorglub.Time.Simple.OrdinalDateProviders.GetDayOfMonth(Zorglub.Time.Simple.CalendarMonth month, int dayOfMonth) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetDayOfYear(Zorglub.Time.Simple.CalendarYear year, int dayOfYear) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetDaysInMonth(Zorglub.Time.Simple.CalendarMonth month) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.OrdinalDate>!
static Zorglub.Time.Simple.OrdinalDateProviders.GetDaysInYear(Zorglub.Time.Simple.CalendarYear year) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.OrdinalDate>!
static Zorglub.Time.Simple.OrdinalDateProviders.GetEndOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetEndOfYear(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetEndOfYear(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetStartOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetStartOfYear(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.OrdinalDateProviders.GetStartOfYear(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Simple.OrdinalDate
static Zorglub.Time.Simple.RangeExtensions.Count(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate> range) -> int
static Zorglub.Time.Simple.RangeExtensions.Count(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay> range) -> int
static Zorglub.Time.Simple.RangeExtensions.Count(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarMonth> range) -> int
static Zorglub.Time.Simple.RangeExtensions.Count(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarYear> range) -> int
static Zorglub.Time.Simple.RangeExtensions.Count(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate> range) -> int
static Zorglub.Time.Simple.RangeExtensions.GetCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate> range) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.RangeExtensions.GetCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay> range) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.RangeExtensions.GetCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarMonth> range) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.RangeExtensions.GetCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarYear> range) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.RangeExtensions.GetCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate> range) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.RangeExtensions.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate> range) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDate>!
static Zorglub.Time.Simple.RangeExtensions.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay> range) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDay>!
static Zorglub.Time.Simple.RangeExtensions.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarMonth> range) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarMonth>!
static Zorglub.Time.Simple.RangeExtensions.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarYear> range) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarYear>!
static Zorglub.Time.Simple.RangeExtensions.ToEnumerable(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate> range) -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.OrdinalDate>!
static Zorglub.Time.Simple.RangeExtensions.WithCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate> range, Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate>
static Zorglub.Time.Simple.RangeExtensions.WithCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay> range, Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDay>
static Zorglub.Time.Simple.RangeExtensions.WithCalendar(this Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate> range, Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate>
static Zorglub.Time.Simple.SimpleCalendar.Armenian.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCalendar.Coptic.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCalendar.Ethiopic.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCalendar.Gregorian.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCalendar.Julian.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCalendar.TabularIslamic.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCalendar.Zoroastrian.get -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCatalog.Add(string! key, Zorglub.Time.Core.SystemSchema! schema, Zorglub.Time.DayNumber epoch, bool proleptic) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCatalog.GetAllCalendars() -> System.Collections.Generic.IReadOnlyCollection<Zorglub.Time.Simple.SimpleCalendar!>!
static Zorglub.Time.Simple.SimpleCatalog.GetCalendar(string! key) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCatalog.GetOrAdd(string! key, Zorglub.Time.Core.SystemSchema! schema, Zorglub.Time.DayNumber epoch, bool proleptic) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCatalog.GetSystemCalendar(Zorglub.Time.CalendarId ident) -> Zorglub.Time.Simple.SimpleCalendar!
static Zorglub.Time.Simple.SimpleCatalog.GetUserCalendars() -> System.Collections.Generic.IReadOnlyCollection<Zorglub.Time.Simple.SimpleCalendar!>!
static Zorglub.Time.Simple.SimpleCatalog.IsFull.get -> bool
static Zorglub.Time.Simple.SimpleCatalog.MaxNumberOfUserCalendars.get -> int
static Zorglub.Time.Simple.SimpleCatalog.ReservedKeys.get -> Zorglub.Time.Core.Utilities.ReadOnlySet<string!>!
static Zorglub.Time.Simple.SimpleCatalog.SystemCalendars.get -> System.Collections.Generic.IReadOnlyCollection<Zorglub.Time.Simple.SimpleCalendar!>!
static Zorglub.Time.Simple.SimpleCatalog.TakeSnapshot() -> System.Collections.Generic.IReadOnlyDictionary<string!, Zorglub.Time.Simple.SimpleCalendar!>!
static Zorglub.Time.Simple.SimpleCatalog.TryAdd(string! key, Zorglub.Time.Core.SystemSchema! schema, Zorglub.Time.DayNumber epoch, bool proleptic, out Zorglub.Time.Simple.SimpleCalendar? calendar) -> bool
static Zorglub.Time.Simple.SimpleCatalog.TryGetCalendar(string! key, out Zorglub.Time.Simple.SimpleCalendar? calendar) -> bool
static Zorglub.Time.Specialized.CivilDate.Adjuster.get -> Zorglub.Time.Specialized.CivilAdjuster!
static Zorglub.Time.Specialized.CivilDate.Calendar.get -> Zorglub.Time.Specialized.CivilCalendar!
static Zorglub.Time.Specialized.CivilDate.Max(Zorglub.Time.Specialized.CivilDate x, Zorglub.Time.Specialized.CivilDate y) -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.MaxValue.get -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.Min(Zorglub.Time.Specialized.CivilDate x, Zorglub.Time.Specialized.CivilDate y) -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.MinValue.get -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.operator !=(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> bool
static Zorglub.Time.Specialized.CivilDate.operator +(Zorglub.Time.Specialized.CivilDate value, int days) -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.operator ++(Zorglub.Time.Specialized.CivilDate value) -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.operator -(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> int
static Zorglub.Time.Specialized.CivilDate.operator -(Zorglub.Time.Specialized.CivilDate value, int days) -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.operator --(Zorglub.Time.Specialized.CivilDate value) -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.CivilDate.operator <(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> bool
static Zorglub.Time.Specialized.CivilDate.operator <=(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> bool
static Zorglub.Time.Specialized.CivilDate.operator ==(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> bool
static Zorglub.Time.Specialized.CivilDate.operator >(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> bool
static Zorglub.Time.Specialized.CivilDate.operator >=(Zorglub.Time.Specialized.CivilDate left, Zorglub.Time.Specialized.CivilDate right) -> bool
static Zorglub.Time.Specialized.CivilDate.Today() -> Zorglub.Time.Specialized.CivilDate
static Zorglub.Time.Specialized.GregorianDate.Adjuster.get -> Zorglub.Time.Specialized.GregorianAdjuster!
static Zorglub.Time.Specialized.GregorianDate.Calendar.get -> Zorglub.Time.Specialized.GregorianCalendar!
static Zorglub.Time.Specialized.GregorianDate.Max(Zorglub.Time.Specialized.GregorianDate x, Zorglub.Time.Specialized.GregorianDate y) -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.MaxValue.get -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.Min(Zorglub.Time.Specialized.GregorianDate x, Zorglub.Time.Specialized.GregorianDate y) -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.MinValue.get -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.operator !=(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> bool
static Zorglub.Time.Specialized.GregorianDate.operator +(Zorglub.Time.Specialized.GregorianDate value, int days) -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.operator ++(Zorglub.Time.Specialized.GregorianDate value) -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.operator -(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> int
static Zorglub.Time.Specialized.GregorianDate.operator -(Zorglub.Time.Specialized.GregorianDate value, int days) -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.operator --(Zorglub.Time.Specialized.GregorianDate value) -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.GregorianDate.operator <(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> bool
static Zorglub.Time.Specialized.GregorianDate.operator <=(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> bool
static Zorglub.Time.Specialized.GregorianDate.operator ==(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> bool
static Zorglub.Time.Specialized.GregorianDate.operator >(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> bool
static Zorglub.Time.Specialized.GregorianDate.operator >=(Zorglub.Time.Specialized.GregorianDate left, Zorglub.Time.Specialized.GregorianDate right) -> bool
static Zorglub.Time.Specialized.GregorianDate.Today() -> Zorglub.Time.Specialized.GregorianDate
static Zorglub.Time.Specialized.JulianDate.Adjuster.get -> Zorglub.Time.Specialized.JulianAdjuster!
static Zorglub.Time.Specialized.JulianDate.Calendar.get -> Zorglub.Time.Specialized.JulianCalendar!
static Zorglub.Time.Specialized.JulianDate.Max(Zorglub.Time.Specialized.JulianDate x, Zorglub.Time.Specialized.JulianDate y) -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.MaxValue.get -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.Min(Zorglub.Time.Specialized.JulianDate x, Zorglub.Time.Specialized.JulianDate y) -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.MinValue.get -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.operator !=(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> bool
static Zorglub.Time.Specialized.JulianDate.operator +(Zorglub.Time.Specialized.JulianDate value, int days) -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.operator ++(Zorglub.Time.Specialized.JulianDate value) -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.operator -(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> int
static Zorglub.Time.Specialized.JulianDate.operator -(Zorglub.Time.Specialized.JulianDate value, int days) -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.operator --(Zorglub.Time.Specialized.JulianDate value) -> Zorglub.Time.Specialized.JulianDate
static Zorglub.Time.Specialized.JulianDate.operator <(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> bool
static Zorglub.Time.Specialized.JulianDate.operator <=(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> bool
static Zorglub.Time.Specialized.JulianDate.operator ==(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> bool
static Zorglub.Time.Specialized.JulianDate.operator >(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> bool
static Zorglub.Time.Specialized.JulianDate.operator >=(Zorglub.Time.Specialized.JulianDate left, Zorglub.Time.Specialized.JulianDate right) -> bool
static Zorglub.Time.Specialized.JulianDate.Today() -> Zorglub.Time.Specialized.JulianDate
virtual Zorglub.Time.Core.CalendricalSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
virtual Zorglub.Time.Core.CalendricalSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
virtual Zorglub.Time.Core.CalendricalSchema.GetYear(int daysSinceEpoch, out int doy) -> int
Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRule.Exact = 2 -> Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRule.Overspill = 1 -> Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRule.Throw = 3 -> Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRule.Truncate = 0 -> Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRuleset
Zorglub.Time.AdditionRuleset.AdditionRuleset() -> void
Zorglub.Time.AdditionRuleset.AdditionRuleset(Zorglub.Time.AdditionRule dateRule, Zorglub.Time.AdditionRule ordinalRule, Zorglub.Time.AdditionRule monthRule) -> void
Zorglub.Time.AdditionRuleset.DateRule.get -> Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRuleset.MonthRule.get -> Zorglub.Time.AdditionRule
Zorglub.Time.AdditionRuleset.OrdinalRule.get -> Zorglub.Time.AdditionRule
Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.Armenian = 2 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.Coptic = 3 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.Ethiopic = 4 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.Gregorian = 0 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.Julian = 1 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.TabularIslamic = 5 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendarId.Zoroastrian = 6 -> Zorglub.Time.CalendarId
Zorglub.Time.CalendricalAdjustments
Zorglub.Time.CalendricalAdjustments.Days = 1 -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.CalendricalAdjustments.DaysAndMonths = Zorglub.Time.CalendricalAdjustments.Days | Zorglub.Time.CalendricalAdjustments.Months -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.CalendricalAdjustments.Months = 4 -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.CalendricalAdjustments.None = 0 -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.CalendricalAdjustments.Weeks = 2 -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.CalendricalAlgorithm.Arithmetical = 1 -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.CalendricalAlgorithm.Astronomical = 2 -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.CalendricalAlgorithm.Observational = 3 -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.CalendricalAlgorithm.Unknown = 0 -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.CalendricalFamily
Zorglub.Time.CalendricalFamily.AnnusVagus = 1 -> Zorglub.Time.CalendricalFamily
Zorglub.Time.CalendricalFamily.Lunar = 3 -> Zorglub.Time.CalendricalFamily
Zorglub.Time.CalendricalFamily.Lunisolar = 4 -> Zorglub.Time.CalendricalFamily
Zorglub.Time.CalendricalFamily.Other = 0 -> Zorglub.Time.CalendricalFamily
Zorglub.Time.CalendricalFamily.Solar = 2 -> Zorglub.Time.CalendricalFamily
Zorglub.Time.Core.CalendricalConstants
Zorglub.Time.Core.CalendricalSchema
Zorglub.Time.Core.CalendricalSchema.Algorithm.get -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.Core.CalendricalSchema.CalendricalSchema(Zorglub.Time.Core.Intervals.Range<int> supportedYears, int minDaysInYear, int minDaysInMonth) -> void
Zorglub.Time.Core.CalendricalSchema.CountDaysInMonthAfter(int daysSinceEpoch) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInMonthAfter(int y, int doy) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInMonthAfter(int y, int m, int d) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInMonthBefore(int daysSinceEpoch) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInMonthBefore(int y, int doy) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInMonthBefore(int y, int m, int d) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearAfter(int daysSinceEpoch) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearAfter(int y, int doy) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearAfter(int y, int m, int d) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearAfterMonth(int y, int m) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearBefore(int daysSinceEpoch) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearBefore(int y, int doy) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysInYearBefore(int y, int m, int d) -> int
Zorglub.Time.Core.CalendricalSchema.CountDaysSinceEpoch(int y, int doy) -> int
Zorglub.Time.Core.CalendricalSchema.GetDayOfYear(int y, int m, int d) -> int
Zorglub.Time.Core.CalendricalSchema.GetEndOfMonth(int y, int m) -> int
Zorglub.Time.Core.CalendricalSchema.GetEndOfYear(int y) -> int
Zorglub.Time.Core.CalendricalSchema.GetEndOfYearInMonths(int y) -> int
Zorglub.Time.Core.CalendricalSchema.GetStartOfMonth(int y, int m) -> int
Zorglub.Time.Core.CalendricalSchema.GetStartOfYearInMonths(int y) -> int
Zorglub.Time.Core.CalendricalSchema.MinDaysInMonth.get -> int
Zorglub.Time.Core.CalendricalSchema.MinDaysInYear.get -> int
Zorglub.Time.Core.CalendricalSchema.PreValidator.get -> Zorglub.Time.Core.ICalendricalPreValidator!
Zorglub.Time.Core.CalendricalSchema.PreValidator.init -> void
Zorglub.Time.Core.CalendricalSchema.SupportedDays.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.CalendricalSchema.SupportedMonths.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.CalendricalSchema.SupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.CalendricalSegment
Zorglub.Time.Core.CalendricalSegment.IsComplete.get -> bool
Zorglub.Time.Core.CalendricalSegment.MaxIsEndOfYear.get -> bool
Zorglub.Time.Core.CalendricalSegment.MinIsStartOfYear.get -> bool
Zorglub.Time.Core.CalendricalSegment.MinMaxDateParts.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.DateParts>
Zorglub.Time.Core.CalendricalSegment.MinMaxMonthParts.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.MonthParts>
Zorglub.Time.Core.CalendricalSegment.MinMaxOrdinalParts.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.OrdinalParts>
Zorglub.Time.Core.CalendricalSegment.SupportedDays.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.CalendricalSegment.SupportedMonths.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.CalendricalSegment.SupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.CalendricalSegmentBuilder
Zorglub.Time.Core.CalendricalSegmentBuilder.BuildSegment() -> Zorglub.Time.Core.CalendricalSegment!
Zorglub.Time.Core.CalendricalSegmentBuilder.CalendricalSegmentBuilder(Zorglub.Time.Core.ICalendricalSchema! schema) -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.HasMax.get -> bool
Zorglub.Time.Core.CalendricalSegmentBuilder.HasMin.get -> bool
Zorglub.Time.Core.CalendricalSegmentBuilder.IsBuildable.get -> bool
Zorglub.Time.Core.CalendricalSegmentBuilder.MaxDateParts.get -> Zorglub.Time.DateParts
Zorglub.Time.Core.CalendricalSegmentBuilder.MaxDateParts.set -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.MaxDaysSinceEpoch.get -> int
Zorglub.Time.Core.CalendricalSegmentBuilder.MaxDaysSinceEpoch.set -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.MaxOrdinalParts.get -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.CalendricalSegmentBuilder.MaxOrdinalParts.set -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.MinDateParts.get -> Zorglub.Time.DateParts
Zorglub.Time.Core.CalendricalSegmentBuilder.MinDateParts.set -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.MinDaysSinceEpoch.get -> int
Zorglub.Time.Core.CalendricalSegmentBuilder.MinDaysSinceEpoch.set -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.MinOrdinalParts.get -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.CalendricalSegmentBuilder.MinOrdinalParts.set -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.SetMaxToEndOfMaxSupportedYear() -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.SetMaxToEndOfYear(int year) -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.SetMinToStartOfMinSupportedYear() -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.SetMinToStartOfYear(int year) -> void
Zorglub.Time.Core.CalendricalSegmentBuilder.TrySetMinToStartOfMinSupportedYearOnOrAfterYear1() -> bool
Zorglub.Time.Core.IAdjustable<TSelf>
Zorglub.Time.Core.IAdjustable<TSelf>.Adjust(System.Func<TSelf, TSelf>! adjuster) -> TSelf
Zorglub.Time.Core.IBlankDayFeaturette
Zorglub.Time.Core.IBlankDayFeaturette.IsBlankDay(int y, int m, int d) -> bool
Zorglub.Time.Core.IBoxable<TSelf>
Zorglub.Time.Core.IBoxable<TSelf>.GetInstance() -> Zorglub.Time.Core.Utilities.Box<TSelf!>!
Zorglub.Time.Core.ICalendricalKernel
Zorglub.Time.Core.ICalendricalKernel.Algorithm.get -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.Core.ICalendricalKernel.CountDaysInMonth(int y, int m) -> int
Zorglub.Time.Core.ICalendricalKernel.CountDaysInYear(int y) -> int
Zorglub.Time.Core.ICalendricalKernel.CountMonthsInYear(int y) -> int
Zorglub.Time.Core.ICalendricalKernel.Family.get -> Zorglub.Time.CalendricalFamily
Zorglub.Time.Core.ICalendricalKernel.IsIntercalaryDay(int y, int m, int d) -> bool
Zorglub.Time.Core.ICalendricalKernel.IsIntercalaryMonth(int y, int m) -> bool
Zorglub.Time.Core.ICalendricalKernel.IsLeapYear(int y) -> bool
Zorglub.Time.Core.ICalendricalKernel.IsRegular(out int monthsInYear) -> bool
Zorglub.Time.Core.ICalendricalKernel.IsSupplementaryDay(int y, int m, int d) -> bool
Zorglub.Time.Core.ICalendricalKernel.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.Core.ICalendricalPreValidator
Zorglub.Time.Core.ICalendricalPreValidator.CreateDefault(Zorglub.Time.Core.CalendricalSchema! schema) -> Zorglub.Time.Core.ICalendricalPreValidator!
Zorglub.Time.Core.ICalendricalPreValidator.ValidateDayOfYear(int y, int dayOfYear, string? paramName = null) -> void
Zorglub.Time.Core.ICalendricalPreValidator.ValidateMonth(int y, int month, string? paramName = null) -> void
Zorglub.Time.Core.ICalendricalPreValidator.ValidateMonthDay(int y, int month, int day, string? paramName = null) -> void
Zorglub.Time.Core.ICalendricalSchema
Zorglub.Time.Core.ICalendricalSchema.CountDaysInYearBeforeMonth(int y, int m) -> int
Zorglub.Time.Core.ICalendricalSchema.CountDaysSinceEpoch(int y, int doy) -> int
Zorglub.Time.Core.ICalendricalSchema.CountDaysSinceEpoch(int y, int m, int d) -> int
Zorglub.Time.Core.ICalendricalSchema.CountMonthsSinceEpoch(int y, int m) -> int
Zorglub.Time.Core.ICalendricalSchema.GetDateParts(int daysSinceEpoch, out int y, out int m, out int d) -> void
Zorglub.Time.Core.ICalendricalSchema.GetDayOfYear(int y, int m, int d) -> int
Zorglub.Time.Core.ICalendricalSchema.GetEndOfMonth(int y, int m) -> int
Zorglub.Time.Core.ICalendricalSchema.GetEndOfYear(int y) -> int
Zorglub.Time.Core.ICalendricalSchema.GetEndOfYearInMonths(int y) -> int
Zorglub.Time.Core.ICalendricalSchema.GetMonth(int y, int doy, out int d) -> int
Zorglub.Time.Core.ICalendricalSchema.GetMonthParts(int monthsSinceEpoch, out int y, out int m) -> void
Zorglub.Time.Core.ICalendricalSchema.GetStartOfMonth(int y, int m) -> int
Zorglub.Time.Core.ICalendricalSchema.GetStartOfYear(int y) -> int
Zorglub.Time.Core.ICalendricalSchema.GetStartOfYearInMonths(int y) -> int
Zorglub.Time.Core.ICalendricalSchema.GetYear(int daysSinceEpoch, out int doy) -> int
Zorglub.Time.Core.ICalendricalSchema.MinDaysInMonth.get -> int
Zorglub.Time.Core.ICalendricalSchema.MinDaysInYear.get -> int
Zorglub.Time.Core.ICalendricalSchema.PreValidator.get -> Zorglub.Time.Core.ICalendricalPreValidator!
Zorglub.Time.Core.ICalendricalSchema.SupportedDays.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.ICalendricalSchema.SupportedMonths.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.ICalendricalSchema.SupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.ICalendricalSchemaPlus
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInMonthAfter(int daysSinceEpoch) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInMonthAfter(int y, int doy) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInMonthAfter(int y, int m, int d) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInMonthBefore(int daysSinceEpoch) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInMonthBefore(int y, int doy) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInMonthBefore(int y, int m, int d) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearAfter(int daysSinceEpoch) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearAfter(int y, int doy) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearAfter(int y, int m, int d) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearAfterMonth(int y, int m) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearBefore(int daysSinceEpoch) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearBefore(int y, int doy) -> int
Zorglub.Time.Core.ICalendricalSchemaPlus.CountDaysInYearBefore(int y, int m, int d) -> int
Zorglub.Time.Core.ICalendricalValidator
Zorglub.Time.Core.ICalendricalValidator.ValidateOrdinal(int year, int dayOfYear, string? paramName = null) -> void
Zorglub.Time.Core.ICalendricalValidator.ValidateYearMonth(int year, int month, string? paramName = null) -> void
Zorglub.Time.Core.ICalendricalValidator.ValidateYearMonthDay(int year, int month, int day, string? paramName = null) -> void
Zorglub.Time.Core.IDifferenceOperators<TSelf, TResult>
Zorglub.Time.Core.IDifferenceOperators<TSelf, TResult>.operator -(TSelf left, TSelf right) -> TResult
Zorglub.Time.Core.IEpagomenalDayFeaturette
Zorglub.Time.Core.IEpagomenalDayFeaturette.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Zorglub.Time.Core.IMinMaxFunctions<TSelf>
Zorglub.Time.Core.IMinMaxFunctions<TSelf>.Max(TSelf x, TSelf y) -> TSelf
Zorglub.Time.Core.IMinMaxFunctions<TSelf>.Min(TSelf x, TSelf y) -> TSelf
Zorglub.Time.Core.Intervals.IInterval<T>
Zorglub.Time.Core.Intervals.IInterval<T>.IsLeftBounded.get -> bool
Zorglub.Time.Core.Intervals.IInterval<T>.IsLeftOpen.get -> bool
Zorglub.Time.Core.Intervals.IInterval<T>.IsRightBounded.get -> bool
Zorglub.Time.Core.Intervals.IInterval<T>.IsRightOpen.get -> bool
Zorglub.Time.Core.Intervals.Interval
Zorglub.Time.Core.Intervals.IRay<T>
Zorglub.Time.Core.Intervals.IRay<T>.Endpoint.get -> T
Zorglub.Time.Core.Intervals.ISegment<T>
Zorglub.Time.Core.Intervals.ISegment<T>.Endpoints.get -> Zorglub.Time.Core.Utilities.OrderedPair<T>
Zorglub.Time.Core.Intervals.ISegment<T>.LowerEnd.get -> T
Zorglub.Time.Core.Intervals.ISegment<T>.UpperEnd.get -> T
Zorglub.Time.Core.Intervals.LowerRay
Zorglub.Time.Core.Intervals.LowerRay<T>
Zorglub.Time.Core.Intervals.LowerRay<T>.Contains(T value) -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.Equals(Zorglub.Time.Core.Intervals.LowerRay<T> other) -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsLeftBounded.get -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsLeftOpen.get -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsProperSubsetOf(Zorglub.Time.Core.Intervals.LowerRay<T> other) -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsProperSupersetOf(Zorglub.Time.Core.Intervals.LowerRay<T> other) -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsRightBounded.get -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsRightOpen.get -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsSubsetOf(Zorglub.Time.Core.Intervals.LowerRay<T> other) -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.IsSupersetOf(Zorglub.Time.Core.Intervals.LowerRay<T> other) -> bool
Zorglub.Time.Core.Intervals.LowerRay<T>.LowerRay() -> void
Zorglub.Time.Core.Intervals.LowerRay<T>.LowerRay(T max) -> void
Zorglub.Time.Core.Intervals.LowerRay<T>.Max.get -> T
Zorglub.Time.Core.Intervals.LowerRay<T>.SetEquals(Zorglub.Time.Core.Intervals.LowerRay<T> other) -> bool
Zorglub.Time.Core.Intervals.Range
Zorglub.Time.Core.Intervals.Range<T>
Zorglub.Time.Core.Intervals.Range<T>.Contains(T value) -> bool
Zorglub.Time.Core.Intervals.Range<T>.Endpoints.get -> Zorglub.Time.Core.Utilities.OrderedPair<T>
Zorglub.Time.Core.Intervals.Range<T>.Equals(Zorglub.Time.Core.Intervals.Range<T> other) -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsLeftBounded.get -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsLeftOpen.get -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsProperSubsetOf(Zorglub.Time.Core.Intervals.Range<T> other) -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsProperSupersetOf(Zorglub.Time.Core.Intervals.Range<T> other) -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsRightBounded.get -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsRightOpen.get -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsSingleton.get -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsSubsetOf(Zorglub.Time.Core.Intervals.Range<T> other) -> bool
Zorglub.Time.Core.Intervals.Range<T>.IsSupersetOf(Zorglub.Time.Core.Intervals.Range<T> other) -> bool
Zorglub.Time.Core.Intervals.Range<T>.Max.get -> T
Zorglub.Time.Core.Intervals.Range<T>.Min.get -> T
Zorglub.Time.Core.Intervals.Range<T>.Range() -> void
Zorglub.Time.Core.Intervals.Range<T>.Range(T min, T max) -> void
Zorglub.Time.Core.Intervals.Range<T>.SetEquals(Zorglub.Time.Core.Intervals.Range<T> other) -> bool
Zorglub.Time.Core.Intervals.Range<T>.WithMax(T max) -> Zorglub.Time.Core.Intervals.Range<T>
Zorglub.Time.Core.Intervals.Range<T>.WithMin(T min) -> Zorglub.Time.Core.Intervals.Range<T>
Zorglub.Time.Core.Intervals.RangeSet
Zorglub.Time.Core.Intervals.RangeSet<T>
Zorglub.Time.Core.Intervals.RangeSet<T>.Equals(Zorglub.Time.Core.Intervals.RangeSet<T> other) -> bool
Zorglub.Time.Core.Intervals.RangeSet<T>.IsEmpty.get -> bool
Zorglub.Time.Core.Intervals.RangeSet<T>.Range.get -> Zorglub.Time.Core.Intervals.Range<T>
Zorglub.Time.Core.Intervals.RangeSet<T>.RangeSet() -> void
Zorglub.Time.Core.Intervals.RangeSet<T>.RangeSet(T min, T max) -> void
Zorglub.Time.Core.Intervals.UpperRay
Zorglub.Time.Core.Intervals.UpperRay<T>
Zorglub.Time.Core.Intervals.UpperRay<T>.Contains(T value) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.Equals(Zorglub.Time.Core.Intervals.UpperRay<T> other) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsLeftBounded.get -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsLeftOpen.get -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsProperSubsetOf(Zorglub.Time.Core.Intervals.UpperRay<T> other) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsProperSupersetOf(Zorglub.Time.Core.Intervals.UpperRay<T> other) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsRightBounded.get -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsRightOpen.get -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsSubsetOf(Zorglub.Time.Core.Intervals.UpperRay<T> other) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.IsSupersetOf(Zorglub.Time.Core.Intervals.UpperRay<T> other) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.Min.get -> T
Zorglub.Time.Core.Intervals.UpperRay<T>.SetEquals(Zorglub.Time.Core.Intervals.UpperRay<T> other) -> bool
Zorglub.Time.Core.Intervals.UpperRay<T>.UpperRay() -> void
Zorglub.Time.Core.Intervals.UpperRay<T>.UpperRay(T min) -> void
Zorglub.Time.Core.IRegularFeaturette
Zorglub.Time.Core.IRegularFeaturette.MonthsInYear.get -> int
Zorglub.Time.Core.ISchemaBound
Zorglub.Time.Core.ISchemaBound.Schema.get -> Zorglub.Time.Core.ICalendricalSchema!
Zorglub.Time.Core.ISerializable<TBinary>
Zorglub.Time.Core.ISerializable<TBinary>.ToBinary() -> TBinary
Zorglub.Time.Core.ISerializable<TSelf, TBinary>
Zorglub.Time.Core.ISerializable<TSelf, TBinary>.FromBinary(TBinary data) -> TSelf
Zorglub.Time.Core.ISetComparable<TOther>
Zorglub.Time.Core.ISetComparable<TOther>.IsProperSubsetOf(TOther other) -> bool
Zorglub.Time.Core.ISetComparable<TOther>.IsProperSupersetOf(TOther other) -> bool
Zorglub.Time.Core.ISetEquatable<TOther>
Zorglub.Time.Core.ISetEquatable<TOther>.SetEquals(TOther other) -> bool
Zorglub.Time.Core.ISetIncludible<TOther>
Zorglub.Time.Core.ISetIncludible<TOther>.IsSubsetOf(TOther other) -> bool
Zorglub.Time.Core.ISetIncludible<TOther>.IsSupersetOf(TOther other) -> bool
Zorglub.Time.Core.ISetMembership<T>
Zorglub.Time.Core.ISetMembership<T>.Contains(T value) -> bool
Zorglub.Time.Core.IVirtualMonthFeaturette
Zorglub.Time.Core.IVirtualMonthFeaturette.VirtualMonth.get -> int
Zorglub.Time.Core.PartsAdapter
Zorglub.Time.Core.PartsAdapter.GetDateParts(int daysSinceEpoch) -> Zorglub.Time.DateParts
Zorglub.Time.Core.PartsAdapter.GetDateParts(int y, int doy) -> Zorglub.Time.DateParts
Zorglub.Time.Core.PartsAdapter.GetDatePartsAtEndOfMonth(int y, int m) -> Zorglub.Time.DateParts
Zorglub.Time.Core.PartsAdapter.GetDatePartsAtEndOfYear(int y) -> Zorglub.Time.DateParts
Zorglub.Time.Core.PartsAdapter.GetMonthParts(int monthsSinceEpoch) -> Zorglub.Time.MonthParts
Zorglub.Time.Core.PartsAdapter.GetMonthPartsAtEndOfYear(int y) -> Zorglub.Time.MonthParts
Zorglub.Time.Core.PartsAdapter.GetOrdinalParts(int daysSinceEpoch) -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.PartsAdapter.GetOrdinalParts(int y, int m, int d) -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.PartsAdapter.GetOrdinalPartsAtEndOfMonth(int y, int m) -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.PartsAdapter.GetOrdinalPartsAtEndOfYear(int y) -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.PartsAdapter.GetOrdinalPartsAtStartOfMonth(int y, int m) -> Zorglub.Time.OrdinalParts
Zorglub.Time.Core.PartsAdapter.PartsAdapter(Zorglub.Time.Core.ICalendricalSchema! schema) -> void
Zorglub.Time.Core.Schemas.CivilSchema
Zorglub.Time.Core.Schemas.Coptic12Schema
Zorglub.Time.Core.Schemas.Coptic12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Zorglub.Time.Core.Schemas.CopticSchema
Zorglub.Time.Core.Schemas.Egyptian12Schema
Zorglub.Time.Core.Schemas.Egyptian12Schema.IsEpagomenalDay(int y, int m, int d, out int epagomenalNumber) -> bool
Zorglub.Time.Core.Schemas.EgyptianSchema
Zorglub.Time.Core.Schemas.GJSchema
Zorglub.Time.Core.Schemas.GJSchema.MonthsInYear.get -> int
Zorglub.Time.Core.Schemas.GregorianSchema
Zorglub.Time.Core.Schemas.JulianSchema
Zorglub.Time.Core.Schemas.PtolemaicSchema
Zorglub.Time.Core.Schemas.TabularIslamicSchema
Zorglub.Time.Core.Schemas.TabularIslamicSchema.MonthsInYear.get -> int
Zorglub.Time.Core.SystemArithmetic
Zorglub.Time.Core.SystemArithmetic.CountDaysBetween(Zorglub.Time.Core.Yedoy start, Zorglub.Time.Core.Yedoy end) -> int
Zorglub.Time.Core.SystemArithmetic.CountDaysBetween(Zorglub.Time.Core.Yemoda start, Zorglub.Time.Core.Yemoda end) -> int
Zorglub.Time.Core.SystemArithmetic.DaysValidator.get -> Zorglub.Time.Core.Validation.DaysValidator!
Zorglub.Time.Core.SystemArithmetic.MaxDaysViaDayOfMonth.get -> int
Zorglub.Time.Core.SystemArithmetic.MaxDaysViaDayOfMonth.init -> void
Zorglub.Time.Core.SystemArithmetic.MaxDaysViaDayOfYear.get -> int
Zorglub.Time.Core.SystemArithmetic.MaxDaysViaDayOfYear.init -> void
Zorglub.Time.Core.SystemArithmetic.MaxYear.get -> int
Zorglub.Time.Core.SystemArithmetic.MinYear.get -> int
Zorglub.Time.Core.SystemArithmetic.MonthsValidator.get -> Zorglub.Time.Core.Validation.MonthsValidator!
Zorglub.Time.Core.SystemArithmetic.NextMonth(Zorglub.Time.Core.Yemo ym) -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.SystemArithmetic.PreviousMonth(Zorglub.Time.Core.Yemo ym) -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.SystemArithmetic.Schema.get -> Zorglub.Time.Core.SystemSchema!
Zorglub.Time.Core.SystemArithmetic.Segment.get -> Zorglub.Time.Core.SystemSegment!
Zorglub.Time.Core.SystemArithmetic.SystemArithmetic(Zorglub.Time.Core.SystemSegment! segment) -> void
Zorglub.Time.Core.SystemArithmetic.YearsValidator.get -> Zorglub.Time.Core.Validation.YearsValidator!
Zorglub.Time.Core.SystemSchema
Zorglub.Time.Core.SystemSchema.GetDateParts(int daysSinceEpoch) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.SystemSchema.GetDateParts(int y, int doy) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.SystemSchema.GetDatePartsAtEndOfMonth(int y, int m) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.SystemSchema.GetDatePartsAtEndOfYear(int y) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.SystemSchema.GetDatePartsAtStartOfMonth(int y, int m) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.SystemSchema.GetDatePartsAtStartOfYear(int y) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.SystemSchema.GetMonthParts(int monthsSinceEpoch) -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.SystemSchema.GetMonthPartsAtEndOfYear(int y) -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.SystemSchema.GetMonthPartsAtStartOfYear(int y) -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.SystemSchema.GetOrdinalParts(int daysSinceEpoch) -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.SystemSchema.GetOrdinalParts(int y, int m, int d) -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.SystemSchema.GetOrdinalPartsAtEndOfMonth(int y, int m) -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.SystemSchema.GetOrdinalPartsAtEndOfYear(int y) -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.SystemSchema.GetOrdinalPartsAtStartOfMonth(int y, int m) -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.SystemSchema.GetOrdinalPartsAtStartOfYear(int y) -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.SystemSchema.SupportedYearsCore.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.SystemSegment
Zorglub.Time.Core.SystemSegment.MinMaxDateParts.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Core.Yemoda>
Zorglub.Time.Core.SystemSegment.MinMaxMonthParts.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Core.Yemo>
Zorglub.Time.Core.SystemSegment.MinMaxOrdinalParts.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Core.Yedoy>
Zorglub.Time.Core.SystemSegment.SupportedDays.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.SystemSegment.SupportedMonths.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.SystemSegment.SupportedYears.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.SystemSegment.ToCalendricalSegment() -> Zorglub.Time.Core.CalendricalSegment!
Zorglub.Time.Core.TemporalConstants
Zorglub.Time.Core.Utilities.Box
Zorglub.Time.Core.Utilities.Box<T>
Zorglub.Time.Core.Utilities.Box<T>.Select<TResult>(System.Func<T!, TResult?>! selector) -> Zorglub.Time.Core.Utilities.Box<TResult!>!
Zorglub.Time.Core.Utilities.OrderedPair
Zorglub.Time.Core.Utilities.OrderedPair<T>
Zorglub.Time.Core.Utilities.OrderedPair<T>.Deconstruct(out T lowerValue, out T upperValue) -> void
Zorglub.Time.Core.Utilities.OrderedPair<T>.Equals(Zorglub.Time.Core.Utilities.OrderedPair<T> other) -> bool
Zorglub.Time.Core.Utilities.OrderedPair<T>.LowerValue.get -> T
Zorglub.Time.Core.Utilities.OrderedPair<T>.OrderedPair() -> void
Zorglub.Time.Core.Utilities.OrderedPair<T>.OrderedPair(T x, T y) -> void
Zorglub.Time.Core.Utilities.OrderedPair<T>.Select<TResult>(System.Func<T, TResult>! lowerValueSelector, System.Func<T, TResult>! upperValueSelector) -> Zorglub.Time.Core.Utilities.OrderedPair<TResult>
Zorglub.Time.Core.Utilities.OrderedPair<T>.Select<TResult>(System.Func<T, TResult>! selector) -> Zorglub.Time.Core.Utilities.OrderedPair<TResult>
Zorglub.Time.Core.Utilities.OrderedPair<T>.UpperValue.get -> T
Zorglub.Time.Core.Utilities.ReadOnlySet<T>
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.Contains(T item) -> bool
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.Count.get -> int
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.GetEnumerator() -> System.Collections.Generic.IEnumerator<T>!
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>! other) -> bool
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>! other) -> bool
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>! other) -> bool
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>! other) -> bool
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>! other) -> bool
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.ReadOnlySet(System.Collections.Generic.HashSet<T>! set) -> void
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.ReadOnlySet(System.Collections.Generic.IEnumerable<T>! collection) -> void
Zorglub.Time.Core.Utilities.ReadOnlySet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>! other) -> bool
Zorglub.Time.Core.Validation.DaysValidator
Zorglub.Time.Core.Validation.DaysValidator.CheckLowerBound(int daysSinceEpoch) -> void
Zorglub.Time.Core.Validation.DaysValidator.CheckOverflow(int daysSinceEpoch) -> void
Zorglub.Time.Core.Validation.DaysValidator.CheckUpperBound(int daysSinceEpoch) -> void
Zorglub.Time.Core.Validation.DaysValidator.DaysValidator(Zorglub.Time.Core.Intervals.Range<int> range) -> void
Zorglub.Time.Core.Validation.DaysValidator.MaxDaysSinceEpoch.get -> int
Zorglub.Time.Core.Validation.DaysValidator.MinDaysSinceEpoch.get -> int
Zorglub.Time.Core.Validation.DaysValidator.Range.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.Validation.DaysValidator.Validate(int daysSinceEpoch, string? paramName = null) -> void
Zorglub.Time.Core.Validation.DomainExtensions
Zorglub.Time.Core.Validation.MonthsValidator
Zorglub.Time.Core.Validation.MonthsValidator.CheckLowerBound(int monthsSinceEpoch) -> void
Zorglub.Time.Core.Validation.MonthsValidator.CheckOverflow(int monthsSinceEpoch) -> void
Zorglub.Time.Core.Validation.MonthsValidator.CheckUpperBound(int monthsSinceEpoch) -> void
Zorglub.Time.Core.Validation.MonthsValidator.MaxMonthsSinceEpoch.get -> int
Zorglub.Time.Core.Validation.MonthsValidator.MinMonthsSinceEpoch.get -> int
Zorglub.Time.Core.Validation.MonthsValidator.MonthsValidator(Zorglub.Time.Core.Intervals.Range<int> range) -> void
Zorglub.Time.Core.Validation.MonthsValidator.Range.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.Validation.MonthsValidator.Validate(int monthsSinceEpoch, string? paramName = null) -> void
Zorglub.Time.Core.Validation.YearsValidator
Zorglub.Time.Core.Validation.YearsValidator.CheckForMonth(int year) -> void
Zorglub.Time.Core.Validation.YearsValidator.CheckLowerBound(int year) -> void
Zorglub.Time.Core.Validation.YearsValidator.CheckOverflow(int year) -> void
Zorglub.Time.Core.Validation.YearsValidator.CheckUpperBound(int year) -> void
Zorglub.Time.Core.Validation.YearsValidator.MaxYear.get -> int
Zorglub.Time.Core.Validation.YearsValidator.MinYear.get -> int
Zorglub.Time.Core.Validation.YearsValidator.Range.get -> Zorglub.Time.Core.Intervals.Range<int>
Zorglub.Time.Core.Validation.YearsValidator.Validate(int year, string? paramName = null) -> void
Zorglub.Time.Core.Validation.YearsValidator.YearsValidator(Zorglub.Time.Core.Intervals.Range<int> range) -> void
Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.Yedoy.CompareTo(object? obj) -> int
Zorglub.Time.Core.Yedoy.CompareTo(Zorglub.Time.Core.Yedoy other) -> int
Zorglub.Time.Core.Yedoy.DayOfYear.get -> int
Zorglub.Time.Core.Yedoy.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Core.Yedoy.Equals(Zorglub.Time.Core.Yedoy other) -> bool
Zorglub.Time.Core.Yedoy.StartOfYear.get -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.Yedoy.ToBinary() -> int
Zorglub.Time.Core.Yedoy.Year.get -> int
Zorglub.Time.Core.Yedoy.Yedoy() -> void
Zorglub.Time.Core.Yedoyx
Zorglub.Time.Core.Yedoyx.DayOfYear.get -> int
Zorglub.Time.Core.Yedoyx.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Core.Yedoyx.Equals(Zorglub.Time.Core.Yedoyx other) -> bool
Zorglub.Time.Core.Yedoyx.Extra.get -> int
Zorglub.Time.Core.Yedoyx.ToBinary() -> int
Zorglub.Time.Core.Yedoyx.Year.get -> int
Zorglub.Time.Core.Yedoyx.Yedoy.get -> Zorglub.Time.Core.Yedoy
Zorglub.Time.Core.Yedoyx.Yedoyx() -> void
Zorglub.Time.Core.Yemo
Zorglub.Time.Core.Yemo.CompareTo(object? obj) -> int
Zorglub.Time.Core.Yemo.CompareTo(Zorglub.Time.Core.Yemo other) -> int
Zorglub.Time.Core.Yemo.Deconstruct(out int year, out int month) -> void
Zorglub.Time.Core.Yemo.Equals(Zorglub.Time.Core.Yemo other) -> bool
Zorglub.Time.Core.Yemo.GetDayOfMonth(int day) -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemo.Month.get -> int
Zorglub.Time.Core.Yemo.StartOfMonth.get -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemo.StartOfYear.get -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemo.ToBinary() -> int
Zorglub.Time.Core.Yemo.Year.get -> int
Zorglub.Time.Core.Yemo.Yemo() -> void
Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemoda.CompareTo(object? obj) -> int
Zorglub.Time.Core.Yemoda.CompareTo(Zorglub.Time.Core.Yemoda other) -> int
Zorglub.Time.Core.Yemoda.Day.get -> int
Zorglub.Time.Core.Yemoda.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Core.Yemoda.Equals(Zorglub.Time.Core.Yemoda other) -> bool
Zorglub.Time.Core.Yemoda.Month.get -> int
Zorglub.Time.Core.Yemoda.StartOfMonth.get -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemoda.StartOfYear.get -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemoda.ToBinary() -> int
Zorglub.Time.Core.Yemoda.ToBinary(uint extraData) -> long
Zorglub.Time.Core.Yemoda.Year.get -> int
Zorglub.Time.Core.Yemoda.Yemo.get -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.Yemoda.Yemoda() -> void
Zorglub.Time.Core.Yemodax
Zorglub.Time.Core.Yemodax.Day.get -> int
Zorglub.Time.Core.Yemodax.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Core.Yemodax.Equals(Zorglub.Time.Core.Yemodax other) -> bool
Zorglub.Time.Core.Yemodax.Extra.get -> int
Zorglub.Time.Core.Yemodax.Month.get -> int
Zorglub.Time.Core.Yemodax.ToBinary() -> int
Zorglub.Time.Core.Yemodax.Year.get -> int
Zorglub.Time.Core.Yemodax.Yemo.get -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.Yemodax.Yemoda.get -> Zorglub.Time.Core.Yemoda
Zorglub.Time.Core.Yemodax.Yemodax() -> void
Zorglub.Time.Core.Yemox
Zorglub.Time.Core.Yemox.Deconstruct(out int year, out int month) -> void
Zorglub.Time.Core.Yemox.Equals(Zorglub.Time.Core.Yemox other) -> bool
Zorglub.Time.Core.Yemox.Extra.get -> int
Zorglub.Time.Core.Yemox.Month.get -> int
Zorglub.Time.Core.Yemox.ToBinary() -> int
Zorglub.Time.Core.Yemox.Year.get -> int
Zorglub.Time.Core.Yemox.Yemo.get -> Zorglub.Time.Core.Yemo
Zorglub.Time.Core.Yemox.Yemox() -> void
Zorglub.Time.DateParts
Zorglub.Time.DateParts.CompareTo(object? obj) -> int
Zorglub.Time.DateParts.CompareTo(Zorglub.Time.DateParts other) -> int
Zorglub.Time.DateParts.DateParts() -> void
Zorglub.Time.DateParts.DateParts(int Year, int Month, int Day) -> void
Zorglub.Time.DateParts.Day.get -> int
Zorglub.Time.DateParts.Day.init -> void
Zorglub.Time.DateParts.Month.get -> int
Zorglub.Time.DateParts.Month.init -> void
Zorglub.Time.DateParts.MonthParts.get -> Zorglub.Time.MonthParts
Zorglub.Time.DateParts.Year.get -> int
Zorglub.Time.DateParts.Year.init -> void
Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.CompareTo(object? obj) -> int
Zorglub.Time.DayNumber.CompareTo(Zorglub.Time.DayNumber other) -> int
Zorglub.Time.DayNumber.CountDaysSince(Zorglub.Time.DayNumber other) -> int
Zorglub.Time.DayNumber.DayNumber() -> void
Zorglub.Time.DayNumber.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.DayNumber.DaysSinceZero.get -> int
Zorglub.Time.DayNumber.Equals(Zorglub.Time.DayNumber other) -> bool
Zorglub.Time.DayNumber.GetGregorianOrdinalParts() -> Zorglub.Time.OrdinalParts
Zorglub.Time.DayNumber.GetGregorianParts() -> Zorglub.Time.DateParts
Zorglub.Time.DayNumber.GetGregorianYear() -> int
Zorglub.Time.DayNumber.GetJulianOrdinalParts() -> Zorglub.Time.OrdinalParts
Zorglub.Time.DayNumber.GetJulianParts() -> Zorglub.Time.DateParts
Zorglub.Time.DayNumber.GetJulianYear() -> int
Zorglub.Time.DayNumber.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.NextDay() -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.Ordinal.get -> Zorglub.Time.Ord
Zorglub.Time.DayNumber.PlusDays(int days) -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.PreviousDay() -> Zorglub.Time.DayNumber
Zorglub.Time.DayNumber.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.DayNumber
Zorglub.Time.DayZero
Zorglub.Time.Extensions.Unboxing
Zorglub.Time.Hemerology.BasicCalendar<TScope>
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Algorithm.get -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.Hemerology.BasicCalendar<TScope>.BasicCalendar(string! name, TScope! scope) -> void
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Domain.get -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Epoch.get -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Family.get -> Zorglub.Time.CalendricalFamily
Zorglub.Time.Hemerology.BasicCalendar<TScope>.GetDayNumber(int year, int dayOfYear) -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.BasicCalendar<TScope>.GetDayNumber(int year, int month, int day) -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.BasicCalendar<TScope>.IsIntercalaryDay(int year, int month, int day) -> bool
Zorglub.Time.Hemerology.BasicCalendar<TScope>.IsIntercalaryMonth(int year, int month) -> bool
Zorglub.Time.Hemerology.BasicCalendar<TScope>.IsLeapYear(int year) -> bool
Zorglub.Time.Hemerology.BasicCalendar<TScope>.IsRegular(out int monthsInYear) -> bool
Zorglub.Time.Hemerology.BasicCalendar<TScope>.IsSupplementaryDay(int year, int month, int day) -> bool
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Name.get -> string!
Zorglub.Time.Hemerology.BasicCalendar<TScope>.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Schema.get -> Zorglub.Time.Core.ICalendricalSchema!
Zorglub.Time.Hemerology.BasicCalendar<TScope>.Scope.get -> TScope!
Zorglub.Time.Hemerology.BasicCalendar<TScope>.YearsValidator.get -> Zorglub.Time.Core.Validation.YearsValidator!
Zorglub.Time.Hemerology.CalendarEpoch
Zorglub.Time.Hemerology.IBlankDay
Zorglub.Time.Hemerology.IBlankDay.IsBlank.get -> bool
Zorglub.Time.Hemerology.ICalendar
Zorglub.Time.Hemerology.ICalendar.Domain.get -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>
Zorglub.Time.Hemerology.ICalendar.Epoch.get -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.ICalendar.GetDayNumber(int year, int dayOfYear) -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.ICalendar.GetDayNumber(int year, int month, int day) -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.ICalendar.Scope.get -> Zorglub.Time.Hemerology.Scopes.CalendarScope!
Zorglub.Time.Hemerology.ICalendar<TDate>
Zorglub.Time.Hemerology.IDate
Zorglub.Time.Hemerology.IDate<TSelf, TCalendar>
Zorglub.Time.Hemerology.IDate<TSelf, TCalendar>.Calendar.get -> TCalendar
Zorglub.Time.Hemerology.IDate<TSelf, TCalendar>.Today() -> TSelf
Zorglub.Time.Hemerology.IDate<TSelf>
Zorglub.Time.Hemerology.IDateable
Zorglub.Time.Hemerology.IDateable.Century.get -> int
Zorglub.Time.Hemerology.IDateable.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Hemerology.IDateable.CountElapsedDaysInMonth() -> int
Zorglub.Time.Hemerology.IDateable.CountElapsedDaysInYear() -> int
Zorglub.Time.Hemerology.IDateable.CountRemainingDaysInMonth() -> int
Zorglub.Time.Hemerology.IDateable.CountRemainingDaysInYear() -> int
Zorglub.Time.Hemerology.IDateable.Day.get -> int
Zorglub.Time.Hemerology.IDateable.DayOfYear.get -> int
Zorglub.Time.Hemerology.IDateable.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Hemerology.IDateable.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Hemerology.IDateable.IsIntercalary.get -> bool
Zorglub.Time.Hemerology.IDateable.IsSupplementary.get -> bool
Zorglub.Time.Hemerology.IDateable.Month.get -> int
Zorglub.Time.Hemerology.IDateable.Year.get -> int
Zorglub.Time.Hemerology.IDateable.YearOfCentury.get -> int
Zorglub.Time.Hemerology.IDateable.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Hemerology.IDateAdjuster<TDate>
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.AdjustDay(TDate date, int newDay) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.AdjustDayOfYear(TDate date, int newDayOfYear) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.AdjustMonth(TDate date, int newMonth) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.AdjustYear(TDate date, int newYear) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.GetEndOfMonth(TDate date) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.GetEndOfYear(TDate date) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.GetStartOfMonth(TDate date) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.GetStartOfYear(TDate date) -> TDate
Zorglub.Time.Hemerology.IDateAdjuster<TDate>.Scope.get -> Zorglub.Time.Hemerology.Scopes.CalendarScope!
Zorglub.Time.Hemerology.IDateProvider<TDate>
Zorglub.Time.Hemerology.IDateProvider<TDate>.GetDaysInMonth(int year, int month) -> System.Collections.Generic.IEnumerable<TDate>!
Zorglub.Time.Hemerology.IDateProvider<TDate>.GetDaysInYear(int year) -> System.Collections.Generic.IEnumerable<TDate>!
Zorglub.Time.Hemerology.IDateProvider<TDate>.GetEndOfMonth(int year, int month) -> TDate
Zorglub.Time.Hemerology.IDateProvider<TDate>.GetEndOfYear(int year) -> TDate
Zorglub.Time.Hemerology.IDateProvider<TDate>.GetStartOfMonth(int year, int month) -> TDate
Zorglub.Time.Hemerology.IDateProvider<TDate>.GetStartOfYear(int year) -> TDate
Zorglub.Time.Hemerology.IEpagomenalDay
Zorglub.Time.Hemerology.IEpagomenalDay.IsEpagomenal(out int epagomenalNumber) -> bool
Zorglub.Time.Hemerology.IFixedDay
Zorglub.Time.Hemerology.IFixedDay.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.IFixedDay.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Hemerology.IFixedDay.DaysSinceEpoch.get -> int
Zorglub.Time.Hemerology.IFixedDay<TSelf>
Zorglub.Time.Hemerology.IFixedDay<TSelf>.Nearest(System.DayOfWeek dayOfWeek) -> TSelf
Zorglub.Time.Hemerology.IFixedDay<TSelf>.Next(System.DayOfWeek dayOfWeek) -> TSelf
Zorglub.Time.Hemerology.IFixedDay<TSelf>.NextOrSame(System.DayOfWeek dayOfWeek) -> TSelf
Zorglub.Time.Hemerology.IFixedDay<TSelf>.Previous(System.DayOfWeek dayOfWeek) -> TSelf
Zorglub.Time.Hemerology.IFixedDay<TSelf>.PreviousOrSame(System.DayOfWeek dayOfWeek) -> TSelf
Zorglub.Time.Hemerology.IStandardArithmetic<TSelf>
Zorglub.Time.Hemerology.IStandardArithmetic<TSelf>.CountDaysSince(TSelf other) -> int
Zorglub.Time.Hemerology.IStandardArithmetic<TSelf>.NextDay() -> TSelf
Zorglub.Time.Hemerology.IStandardArithmetic<TSelf>.PlusDays(int days) -> TSelf
Zorglub.Time.Hemerology.IStandardArithmetic<TSelf>.PreviousDay() -> TSelf
Zorglub.Time.Hemerology.MinMaxYearBasicCalendar
Zorglub.Time.Hemerology.MinMaxYearBasicCalendar.MinMaxYearBasicCalendar(string! name, Zorglub.Time.Hemerology.Scopes.MinMaxYearScope! scope) -> void
Zorglub.Time.Hemerology.Scopes.CalendarScope
Zorglub.Time.Hemerology.Scopes.CalendarScope.CalendarScope(Zorglub.Time.DayNumber epoch, Zorglub.Time.Core.CalendricalSegment! segment) -> void
Zorglub.Time.Hemerology.Scopes.CalendarScope.DaysValidator.get -> Zorglub.Time.Core.Validation.DaysValidator!
Zorglub.Time.Hemerology.Scopes.CalendarScope.Domain.get -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>
Zorglub.Time.Hemerology.Scopes.CalendarScope.Epoch.get -> Zorglub.Time.DayNumber
Zorglub.Time.Hemerology.Scopes.CalendarScope.MonthsValidator.get -> Zorglub.Time.Core.Validation.MonthsValidator!
Zorglub.Time.Hemerology.Scopes.CalendarScope.PreValidator.get -> Zorglub.Time.Core.ICalendricalPreValidator!
Zorglub.Time.Hemerology.Scopes.CalendarScope.Schema.get -> Zorglub.Time.Core.ICalendricalSchema!
Zorglub.Time.Hemerology.Scopes.CalendarScope.Segment.get -> Zorglub.Time.Core.CalendricalSegment!
Zorglub.Time.Hemerology.Scopes.CalendarScope.YearsValidator.get -> Zorglub.Time.Core.Validation.YearsValidator!
Zorglub.Time.Hemerology.Scopes.MinMaxYearScope
Zorglub.Time.Hemerology.Scopes.ProlepticScope
Zorglub.Time.Hemerology.Scopes.ProlepticScope.ProlepticScope(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch) -> void
Zorglub.Time.Hemerology.Scopes.StandardScope
Zorglub.Time.Hemerology.Scopes.StandardScope.StandardScope(Zorglub.Time.Core.ICalendricalSchema! schema, Zorglub.Time.DayNumber epoch) -> void
Zorglub.Time.Hemerology.YearNumbering
Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Friday = 5 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Monday = 1 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.None = 0 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Saturday = 6 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Sunday = 7 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Thursday = 4 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Tuesday = 2 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekday.Wednesday = 3 -> Zorglub.Time.IsoWeekday
Zorglub.Time.IsoWeekdayExtensions
Zorglub.Time.MonthParts
Zorglub.Time.MonthParts.CompareTo(object? obj) -> int
Zorglub.Time.MonthParts.CompareTo(Zorglub.Time.MonthParts other) -> int
Zorglub.Time.MonthParts.Month.get -> int
Zorglub.Time.MonthParts.Month.init -> void
Zorglub.Time.MonthParts.MonthParts() -> void
Zorglub.Time.MonthParts.MonthParts(int Year, int Month) -> void
Zorglub.Time.MonthParts.Year.get -> int
Zorglub.Time.MonthParts.Year.init -> void
Zorglub.Time.Ord
Zorglub.Time.Ord.Add(int num) -> Zorglub.Time.Ord
Zorglub.Time.Ord.CompareTo(object? obj) -> int
Zorglub.Time.Ord.CompareTo(Zorglub.Time.Ord other) -> int
Zorglub.Time.Ord.Deconstruct(out int pos, out bool afterZeroth) -> void
Zorglub.Time.Ord.Decrement() -> Zorglub.Time.Ord
Zorglub.Time.Ord.Equals(Zorglub.Time.Ord other) -> bool
Zorglub.Time.Ord.Increment() -> Zorglub.Time.Ord
Zorglub.Time.Ord.Negate() -> Zorglub.Time.Ord
Zorglub.Time.Ord.Ord() -> void
Zorglub.Time.Ord.Rank.get -> int
Zorglub.Time.Ord.Subtract(Zorglub.Time.Ord other) -> int
Zorglub.Time.Ord.ToInt32() -> int
Zorglub.Time.OrdinalParts
Zorglub.Time.OrdinalParts.CompareTo(object? obj) -> int
Zorglub.Time.OrdinalParts.CompareTo(Zorglub.Time.OrdinalParts other) -> int
Zorglub.Time.OrdinalParts.DayOfYear.get -> int
Zorglub.Time.OrdinalParts.DayOfYear.init -> void
Zorglub.Time.OrdinalParts.OrdinalParts() -> void
Zorglub.Time.OrdinalParts.OrdinalParts(int Year, int DayOfYear) -> void
Zorglub.Time.OrdinalParts.Year.get -> int
Zorglub.Time.OrdinalParts.Year.init -> void
Zorglub.Time.Simple.BoxExtensions
Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.CalendarDate.CalendarDate() -> void
Zorglub.Time.Simple.CalendarDate.CalendarDate(int year, int month, int day) -> void
Zorglub.Time.Simple.CalendarDate.CalendarMonth.get -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarDate.CalendarYear.get -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarDate.Century.get -> int
Zorglub.Time.Simple.CalendarDate.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarDate.CompareTo(object? obj) -> int
Zorglub.Time.Simple.CalendarDate.CompareTo(Zorglub.Time.Simple.CalendarDate other) -> int
Zorglub.Time.Simple.CalendarDate.CountDaysSince(Zorglub.Time.Simple.CalendarDate other) -> int
Zorglub.Time.Simple.CalendarDate.CountElapsedDaysInMonth() -> int
Zorglub.Time.Simple.CalendarDate.CountElapsedDaysInYear() -> int
Zorglub.Time.Simple.CalendarDate.CountMonthsSince(Zorglub.Time.Simple.CalendarDate other) -> int
Zorglub.Time.Simple.CalendarDate.CountRemainingDaysInMonth() -> int
Zorglub.Time.Simple.CalendarDate.CountRemainingDaysInYear() -> int
Zorglub.Time.Simple.CalendarDate.CountYearsSince(Zorglub.Time.Simple.CalendarDate other) -> int
Zorglub.Time.Simple.CalendarDate.Day.get -> int
Zorglub.Time.Simple.CalendarDate.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Simple.CalendarDate.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Simple.CalendarDate.DayOfYear.get -> int
Zorglub.Time.Simple.CalendarDate.DaysSinceEpoch.get -> int
Zorglub.Time.Simple.CalendarDate.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Simple.CalendarDate.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Simple.CalendarDate.Equals(Zorglub.Time.Simple.CalendarDate other) -> bool
Zorglub.Time.Simple.CalendarDate.IsIntercalary.get -> bool
Zorglub.Time.Simple.CalendarDate.IsSupplementary.get -> bool
Zorglub.Time.Simple.CalendarDate.Month.get -> int
Zorglub.Time.Simple.CalendarDate.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.NextDay() -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.PlusDays(int days) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.PlusMonths(int months) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.PlusYears(int years) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.PreviousDay() -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.ToBinary() -> int
Zorglub.Time.Simple.CalendarDate.ToCalendarDay() -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDate.ToOrdinalDate() -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.CalendarDate.WithCalendar(Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDate.Year.get -> int
Zorglub.Time.Simple.CalendarDate.YearOfCentury.get -> int
Zorglub.Time.Simple.CalendarDate.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarDateAdjusters
Zorglub.Time.Simple.CalendarDateProviders
Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.CalendarDay.CalendarDay() -> void
Zorglub.Time.Simple.CalendarDay.CalendarDay(Zorglub.Time.DayNumber dayNumber) -> void
Zorglub.Time.Simple.CalendarDay.CalendarMonth.get -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarDay.CalendarYear.get -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarDay.Century.get -> int
Zorglub.Time.Simple.CalendarDay.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarDay.CompareTo(object? obj) -> int
Zorglub.Time.Simple.CalendarDay.CompareTo(Zorglub.Time.Simple.CalendarDay other) -> int
Zorglub.Time.Simple.CalendarDay.CountDaysSince(Zorglub.Time.Simple.CalendarDay other) -> int
Zorglub.Time.Simple.CalendarDay.CountElapsedDaysInMonth() -> int
Zorglub.Time.Simple.CalendarDay.CountElapsedDaysInYear() -> int
Zorglub.Time.Simple.CalendarDay.CountRemainingDaysInMonth() -> int
Zorglub.Time.Simple.CalendarDay.CountRemainingDaysInYear() -> int
Zorglub.Time.Simple.CalendarDay.Day.get -> int
Zorglub.Time.Simple.CalendarDay.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Simple.CalendarDay.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Simple.CalendarDay.DayOfYear.get -> int
Zorglub.Time.Simple.CalendarDay.DaysSinceEpoch.get -> int
Zorglub.Time.Simple.CalendarDay.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Simple.CalendarDay.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Simple.CalendarDay.Equals(Zorglub.Time.Simple.CalendarDay other) -> bool
Zorglub.Time.Simple.CalendarDay.IsIntercalary.get -> bool
Zorglub.Time.Simple.CalendarDay.IsSupplementary.get -> bool
Zorglub.Time.Simple.CalendarDay.Month.get -> int
Zorglub.Time.Simple.CalendarDay.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.NextDay() -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.PlusDays(int days) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.PreviousDay() -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.ToBinary() -> int
Zorglub.Time.Simple.CalendarDay.ToCalendarDate() -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarDay.ToOrdinalDate() -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.CalendarDay.WithCalendar(Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.CalendarDay.Year.get -> int
Zorglub.Time.Simple.CalendarDay.YearOfCentury.get -> int
Zorglub.Time.Simple.CalendarDay.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarDayAdjusters
Zorglub.Time.Simple.CalendarDayProviders
Zorglub.Time.Simple.CalendarMath
Zorglub.Time.Simple.CalendarMath.AdditionRuleset.get -> Zorglub.Time.AdditionRuleset
Zorglub.Time.Simple.CalendarMath.AddMonths(Zorglub.Time.Simple.CalendarDate date, int months) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarMath.AddYears(Zorglub.Time.Simple.CalendarDate date, int years) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarMath.AddYears(Zorglub.Time.Simple.CalendarMonth month, int years) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMath.AddYears(Zorglub.Time.Simple.OrdinalDate date, int years) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.CalendarMath.Arithmetic.get -> Zorglub.Time.Core.SystemArithmetic!
Zorglub.Time.Simple.CalendarMath.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.CalendarMath.CalendarMath(Zorglub.Time.Simple.SimpleCalendar! calendar, Zorglub.Time.AdditionRuleset additionRuleset) -> void
Zorglub.Time.Simple.CalendarMath.CountMonthsBetween(Zorglub.Time.Simple.CalendarDate start, Zorglub.Time.Simple.CalendarDate end, out Zorglub.Time.Simple.CalendarDate newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountMonthsBetweenCore(Zorglub.Time.Simple.CalendarDate start, Zorglub.Time.Simple.CalendarDate end, out Zorglub.Time.Simple.CalendarDate newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountYearsBetween(Zorglub.Time.Simple.CalendarDate start, Zorglub.Time.Simple.CalendarDate end, out Zorglub.Time.Simple.CalendarDate newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountYearsBetween(Zorglub.Time.Simple.CalendarMonth start, Zorglub.Time.Simple.CalendarMonth end, out Zorglub.Time.Simple.CalendarMonth newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountYearsBetween(Zorglub.Time.Simple.OrdinalDate start, Zorglub.Time.Simple.OrdinalDate end, out Zorglub.Time.Simple.OrdinalDate newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountYearsBetweenCore(Zorglub.Time.Simple.CalendarDate start, Zorglub.Time.Simple.CalendarDate end, out Zorglub.Time.Simple.CalendarDate newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountYearsBetweenCore(Zorglub.Time.Simple.CalendarMonth start, Zorglub.Time.Simple.CalendarMonth end, out Zorglub.Time.Simple.CalendarMonth newStart) -> int
Zorglub.Time.Simple.CalendarMath.CountYearsBetweenCore(Zorglub.Time.Simple.OrdinalDate start, Zorglub.Time.Simple.OrdinalDate end, out Zorglub.Time.Simple.OrdinalDate newStart) -> int
Zorglub.Time.Simple.CalendarMath.Schema.get -> Zorglub.Time.Core.ICalendricalKernel!
Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.CalendarMonth.CalendarMonth() -> void
Zorglub.Time.Simple.CalendarMonth.CalendarMonth(int year, int month) -> void
Zorglub.Time.Simple.CalendarMonth.CalendarYear.get -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarMonth.Century.get -> int
Zorglub.Time.Simple.CalendarMonth.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarMonth.CompareTo(object? obj) -> int
Zorglub.Time.Simple.CalendarMonth.CompareTo(Zorglub.Time.Simple.CalendarMonth other) -> int
Zorglub.Time.Simple.CalendarMonth.CountDaysInMonth() -> int
Zorglub.Time.Simple.CalendarMonth.CountElapsedDaysInYear() -> int
Zorglub.Time.Simple.CalendarMonth.CountMonthsSince(Zorglub.Time.Simple.CalendarMonth other) -> int
Zorglub.Time.Simple.CalendarMonth.CountRemainingDaysInYear() -> int
Zorglub.Time.Simple.CalendarMonth.CountYearsSince(Zorglub.Time.Simple.CalendarMonth other) -> int
Zorglub.Time.Simple.CalendarMonth.Deconstruct(out int year, out int month) -> void
Zorglub.Time.Simple.CalendarMonth.Equals(Zorglub.Time.Simple.CalendarMonth other) -> bool
Zorglub.Time.Simple.CalendarMonth.FirstDay.get -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarMonth.GetAllDays() -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarDate>!
Zorglub.Time.Simple.CalendarMonth.GetDayOfMonth(int dayOfMonth) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarMonth.IsIntercalary.get -> bool
Zorglub.Time.Simple.CalendarMonth.LastDay.get -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.CalendarMonth.Month.get -> int
Zorglub.Time.Simple.CalendarMonth.NextMonth() -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.PlusMonths(int months) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.PlusYears(int years) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.PreviousMonth() -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.ToBinary() -> int
Zorglub.Time.Simple.CalendarMonth.ToRange() -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate>
Zorglub.Time.Simple.CalendarMonth.WithCalendar(Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarDate>
Zorglub.Time.Simple.CalendarMonth.WithMonth(int newMonth) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.WithYear(int newYear) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarMonth.Year.get -> int
Zorglub.Time.Simple.CalendarMonth.YearOfCentury.get -> int
Zorglub.Time.Simple.CalendarMonth.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarYear.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.CalendarYear.CalendarYear() -> void
Zorglub.Time.Simple.CalendarYear.CalendarYear(int year) -> void
Zorglub.Time.Simple.CalendarYear.Century.get -> int
Zorglub.Time.Simple.CalendarYear.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.CalendarYear.CompareTo(object? obj) -> int
Zorglub.Time.Simple.CalendarYear.CompareTo(Zorglub.Time.Simple.CalendarYear other) -> int
Zorglub.Time.Simple.CalendarYear.CountDaysInYear() -> int
Zorglub.Time.Simple.CalendarYear.CountMonthsInYear() -> int
Zorglub.Time.Simple.CalendarYear.CountYearsSince(Zorglub.Time.Simple.CalendarYear other) -> int
Zorglub.Time.Simple.CalendarYear.Equals(Zorglub.Time.Simple.CalendarYear other) -> bool
Zorglub.Time.Simple.CalendarYear.FirstDay.get -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.CalendarYear.FirstMonth.get -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarYear.GetAllDays() -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.OrdinalDate>!
Zorglub.Time.Simple.CalendarYear.GetAllMonths() -> System.Collections.Generic.IEnumerable<Zorglub.Time.Simple.CalendarMonth>!
Zorglub.Time.Simple.CalendarYear.GetDayOfYear(int dayOfYear) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.CalendarYear.GetMonthOfYear(int month) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarYear.IsLeap.get -> bool
Zorglub.Time.Simple.CalendarYear.LastDay.get -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.CalendarYear.LastMonth.get -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.CalendarYear.NextYear() -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarYear.PlusYears(int years) -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarYear.PreviousYear() -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarYear.ToBinary() -> int
Zorglub.Time.Simple.CalendarYear.ToMonthRange() -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.CalendarMonth>
Zorglub.Time.Simple.CalendarYear.ToRange() -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate>
Zorglub.Time.Simple.CalendarYear.WithCalendar(Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.Simple.OrdinalDate>
Zorglub.Time.Simple.CalendarYear.WithYear(int newYear) -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.CalendarYear.Year.get -> int
Zorglub.Time.Simple.CalendarYear.YearOfCentury.get -> int
Zorglub.Time.Simple.CalendarYear.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.IDateProviders<TDate>
Zorglub.Time.Simple.IDateProviders<TDate>.ConvertToRange(Zorglub.Time.Simple.CalendarMonth month) -> Zorglub.Time.Core.Intervals.Range<TDate>
Zorglub.Time.Simple.IDateProviders<TDate>.ConvertToRange(Zorglub.Time.Simple.CalendarYear year) -> Zorglub.Time.Core.Intervals.Range<TDate>
Zorglub.Time.Simple.IDateProviders<TDate>.GetDayOfMonth(Zorglub.Time.Simple.CalendarMonth month, int dayOfMonth) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetDayOfYear(Zorglub.Time.Simple.CalendarYear year, int dayOfYear) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetDaysInMonth(Zorglub.Time.Simple.CalendarMonth month) -> System.Collections.Generic.IEnumerable<TDate>!
Zorglub.Time.Simple.IDateProviders<TDate>.GetDaysInYear(Zorglub.Time.Simple.CalendarYear year) -> System.Collections.Generic.IEnumerable<TDate>!
Zorglub.Time.Simple.IDateProviders<TDate>.GetEndOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetEndOfYear(Zorglub.Time.Simple.CalendarMonth month) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetEndOfYear(Zorglub.Time.Simple.CalendarYear year) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetStartOfMonth(Zorglub.Time.Simple.CalendarMonth month) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetStartOfYear(Zorglub.Time.Simple.CalendarMonth month) -> TDate
Zorglub.Time.Simple.IDateProviders<TDate>.GetStartOfYear(Zorglub.Time.Simple.CalendarYear year) -> TDate
Zorglub.Time.Simple.ISimpleDate
Zorglub.Time.Simple.ISimpleDate.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.ISimpleDate.CalendarMonth.get -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.ISimpleDate.CalendarYear.get -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.ISimpleDate.ToCalendarDate() -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.ISimpleDate.ToCalendarDay() -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.ISimpleDate.ToOrdinalDate() -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.ISimpleDate<TSelf>
Zorglub.Time.Simple.ISimpleDate<TSelf>.WithCalendar(Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> TSelf
Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.Calendar.get -> Zorglub.Time.Simple.SimpleCalendar!
Zorglub.Time.Simple.OrdinalDate.CalendarMonth.get -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.OrdinalDate.CalendarYear.get -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.OrdinalDate.Century.get -> int
Zorglub.Time.Simple.OrdinalDate.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.OrdinalDate.CompareTo(object? obj) -> int
Zorglub.Time.Simple.OrdinalDate.CompareTo(Zorglub.Time.Simple.OrdinalDate other) -> int
Zorglub.Time.Simple.OrdinalDate.CountDaysSince(Zorglub.Time.Simple.OrdinalDate other) -> int
Zorglub.Time.Simple.OrdinalDate.CountElapsedDaysInMonth() -> int
Zorglub.Time.Simple.OrdinalDate.CountElapsedDaysInYear() -> int
Zorglub.Time.Simple.OrdinalDate.CountRemainingDaysInMonth() -> int
Zorglub.Time.Simple.OrdinalDate.CountRemainingDaysInYear() -> int
Zorglub.Time.Simple.OrdinalDate.CountYearsSince(Zorglub.Time.Simple.OrdinalDate other) -> int
Zorglub.Time.Simple.OrdinalDate.Day.get -> int
Zorglub.Time.Simple.OrdinalDate.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Simple.OrdinalDate.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Simple.OrdinalDate.DayOfYear.get -> int
Zorglub.Time.Simple.OrdinalDate.DaysSinceEpoch.get -> int
Zorglub.Time.Simple.OrdinalDate.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Simple.OrdinalDate.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Simple.OrdinalDate.Equals(Zorglub.Time.Simple.OrdinalDate other) -> bool
Zorglub.Time.Simple.OrdinalDate.IsIntercalary.get -> bool
Zorglub.Time.Simple.OrdinalDate.IsSupplementary.get -> bool
Zorglub.Time.Simple.OrdinalDate.Month.get -> int
Zorglub.Time.Simple.OrdinalDate.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.NextDay() -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.OrdinalDate() -> void
Zorglub.Time.Simple.OrdinalDate.OrdinalDate(int year, int dayOfYear) -> void
Zorglub.Time.Simple.OrdinalDate.PlusDays(int days) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.PlusYears(int years) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.PreviousDay() -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.ToBinary() -> int
Zorglub.Time.Simple.OrdinalDate.ToCalendarDate() -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.OrdinalDate.ToCalendarDay() -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.OrdinalDate.WithCalendar(Zorglub.Time.Simple.SimpleCalendar! newCalendar) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.OrdinalDate.Year.get -> int
Zorglub.Time.Simple.OrdinalDate.YearOfCentury.get -> int
Zorglub.Time.Simple.OrdinalDate.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Simple.OrdinalDateAdjusters
Zorglub.Time.Simple.OrdinalDateProviders
Zorglub.Time.Simple.PowerMath
Zorglub.Time.Simple.PowerMath.PowerMath(Zorglub.Time.Simple.SimpleCalendar! calendar, Zorglub.Time.AdditionRuleset additionRuleset) -> void
Zorglub.Time.Simple.RangeExtensions
Zorglub.Time.Simple.SimpleCalendar
Zorglub.Time.Simple.SimpleCalendar.Algorithm.get -> Zorglub.Time.CalendricalAlgorithm
Zorglub.Time.Simple.SimpleCalendar.Domain.get -> Zorglub.Time.Core.Intervals.Range<Zorglub.Time.DayNumber>
Zorglub.Time.Simple.SimpleCalendar.Epoch.get -> Zorglub.Time.DayNumber
Zorglub.Time.Simple.SimpleCalendar.Family.get -> Zorglub.Time.CalendricalFamily
Zorglub.Time.Simple.SimpleCalendar.GetCalendarDate(int year, int month, int day) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.SimpleCalendar.GetCalendarDate(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.SimpleCalendar.GetCalendarDay(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.SimpleCalendar.GetCalendarMonth(int year, int month) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.SimpleCalendar.GetCalendarMonth(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.SimpleCalendar.GetCalendarYear(int year) -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.SimpleCalendar.GetCalendarYear(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.SimpleCalendar.GetCurrentDate() -> Zorglub.Time.Simple.CalendarDate
Zorglub.Time.Simple.SimpleCalendar.GetCurrentDay() -> Zorglub.Time.Simple.CalendarDay
Zorglub.Time.Simple.SimpleCalendar.GetCurrentMonth() -> Zorglub.Time.Simple.CalendarMonth
Zorglub.Time.Simple.SimpleCalendar.GetCurrentOrdinal() -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.SimpleCalendar.GetCurrentYear() -> Zorglub.Time.Simple.CalendarYear
Zorglub.Time.Simple.SimpleCalendar.GetOrdinalDate(int year, int dayOfYear) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.SimpleCalendar.GetOrdinalDate(Zorglub.Time.DayNumber dayNumber) -> Zorglub.Time.Simple.OrdinalDate
Zorglub.Time.Simple.SimpleCalendar.IsProleptic.get -> bool
Zorglub.Time.Simple.SimpleCalendar.IsRegular(out int monthsInYear) -> bool
Zorglub.Time.Simple.SimpleCalendar.IsUserDefined.get -> bool
Zorglub.Time.Simple.SimpleCalendar.Key.get -> string!
Zorglub.Time.Simple.SimpleCalendar.Math.get -> Zorglub.Time.Simple.CalendarMath!
Zorglub.Time.Simple.SimpleCalendar.Math.set -> void
Zorglub.Time.Simple.SimpleCalendar.MinMaxDate.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Simple.CalendarDate>
Zorglub.Time.Simple.SimpleCalendar.MinMaxDay.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Simple.CalendarDay>
Zorglub.Time.Simple.SimpleCalendar.MinMaxMonth.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Simple.CalendarMonth>
Zorglub.Time.Simple.SimpleCalendar.MinMaxOrdinal.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Simple.OrdinalDate>
Zorglub.Time.Simple.SimpleCalendar.MinMaxYear.get -> Zorglub.Time.Core.Utilities.OrderedPair<Zorglub.Time.Simple.CalendarYear>
Zorglub.Time.Simple.SimpleCalendar.PeriodicAdjustments.get -> Zorglub.Time.CalendricalAdjustments
Zorglub.Time.Simple.SimpleCalendar.PermanentId.get -> Zorglub.Time.CalendarId
Zorglub.Time.Simple.SimpleCalendar.Scope.get -> Zorglub.Time.Hemerology.Scopes.CalendarScope!
Zorglub.Time.Simple.SimpleCatalog
Zorglub.Time.Specialized.CivilAdjuster
Zorglub.Time.Specialized.CivilAdjuster.CivilAdjuster() -> void
Zorglub.Time.Specialized.CivilCalendar
Zorglub.Time.Specialized.CivilCalendar.CivilCalendar() -> void
Zorglub.Time.Specialized.CivilCalendar.MonthsInYear.get -> int
Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.Adjust(System.Func<Zorglub.Time.Specialized.CivilDate, Zorglub.Time.Specialized.CivilDate>! adjuster) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.Century.get -> int
Zorglub.Time.Specialized.CivilDate.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Specialized.CivilDate.CivilDate() -> void
Zorglub.Time.Specialized.CivilDate.CivilDate(int year, int dayOfYear) -> void
Zorglub.Time.Specialized.CivilDate.CivilDate(int year, int month, int day) -> void
Zorglub.Time.Specialized.CivilDate.CivilDate(Zorglub.Time.DayNumber dayNumber) -> void
Zorglub.Time.Specialized.CivilDate.CompareTo(object? obj) -> int
Zorglub.Time.Specialized.CivilDate.CompareTo(Zorglub.Time.Specialized.CivilDate other) -> int
Zorglub.Time.Specialized.CivilDate.CountDaysSince(Zorglub.Time.Specialized.CivilDate other) -> int
Zorglub.Time.Specialized.CivilDate.CountElapsedDaysInMonth() -> int
Zorglub.Time.Specialized.CivilDate.CountElapsedDaysInYear() -> int
Zorglub.Time.Specialized.CivilDate.CountRemainingDaysInMonth() -> int
Zorglub.Time.Specialized.CivilDate.CountRemainingDaysInYear() -> int
Zorglub.Time.Specialized.CivilDate.Day.get -> int
Zorglub.Time.Specialized.CivilDate.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Specialized.CivilDate.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Specialized.CivilDate.DayOfYear.get -> int
Zorglub.Time.Specialized.CivilDate.DaysSinceZero.get -> int
Zorglub.Time.Specialized.CivilDate.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Specialized.CivilDate.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Specialized.CivilDate.Equals(Zorglub.Time.Specialized.CivilDate other) -> bool
Zorglub.Time.Specialized.CivilDate.IsIntercalary.get -> bool
Zorglub.Time.Specialized.CivilDate.IsSupplementary.get -> bool
Zorglub.Time.Specialized.CivilDate.Month.get -> int
Zorglub.Time.Specialized.CivilDate.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.NextDay() -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.PlusDays(int days) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.PreviousDay() -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.CivilDate
Zorglub.Time.Specialized.CivilDate.Year.get -> int
Zorglub.Time.Specialized.CivilDate.YearOfCentury.get -> int
Zorglub.Time.Specialized.CivilDate.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Specialized.GregorianAdjuster
Zorglub.Time.Specialized.GregorianAdjuster.GregorianAdjuster() -> void
Zorglub.Time.Specialized.GregorianCalendar
Zorglub.Time.Specialized.GregorianCalendar.GregorianCalendar() -> void
Zorglub.Time.Specialized.GregorianCalendar.MonthsInYear.get -> int
Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.Adjust(System.Func<Zorglub.Time.Specialized.GregorianDate, Zorglub.Time.Specialized.GregorianDate>! adjuster) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.Century.get -> int
Zorglub.Time.Specialized.GregorianDate.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Specialized.GregorianDate.CompareTo(object? obj) -> int
Zorglub.Time.Specialized.GregorianDate.CompareTo(Zorglub.Time.Specialized.GregorianDate other) -> int
Zorglub.Time.Specialized.GregorianDate.CountDaysSince(Zorglub.Time.Specialized.GregorianDate other) -> int
Zorglub.Time.Specialized.GregorianDate.CountElapsedDaysInMonth() -> int
Zorglub.Time.Specialized.GregorianDate.CountElapsedDaysInYear() -> int
Zorglub.Time.Specialized.GregorianDate.CountRemainingDaysInMonth() -> int
Zorglub.Time.Specialized.GregorianDate.CountRemainingDaysInYear() -> int
Zorglub.Time.Specialized.GregorianDate.Day.get -> int
Zorglub.Time.Specialized.GregorianDate.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Specialized.GregorianDate.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Specialized.GregorianDate.DayOfYear.get -> int
Zorglub.Time.Specialized.GregorianDate.DaysSinceZero.get -> int
Zorglub.Time.Specialized.GregorianDate.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Specialized.GregorianDate.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Specialized.GregorianDate.Equals(Zorglub.Time.Specialized.GregorianDate other) -> bool
Zorglub.Time.Specialized.GregorianDate.GregorianDate() -> void
Zorglub.Time.Specialized.GregorianDate.GregorianDate(int year, int dayOfYear) -> void
Zorglub.Time.Specialized.GregorianDate.GregorianDate(int year, int month, int day) -> void
Zorglub.Time.Specialized.GregorianDate.GregorianDate(Zorglub.Time.DayNumber dayNumber) -> void
Zorglub.Time.Specialized.GregorianDate.IsIntercalary.get -> bool
Zorglub.Time.Specialized.GregorianDate.IsSupplementary.get -> bool
Zorglub.Time.Specialized.GregorianDate.Month.get -> int
Zorglub.Time.Specialized.GregorianDate.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.NextDay() -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.PlusDays(int days) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.PreviousDay() -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.GregorianDate
Zorglub.Time.Specialized.GregorianDate.Year.get -> int
Zorglub.Time.Specialized.GregorianDate.YearOfCentury.get -> int
Zorglub.Time.Specialized.GregorianDate.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Specialized.JulianAdjuster
Zorglub.Time.Specialized.JulianAdjuster.JulianAdjuster() -> void
Zorglub.Time.Specialized.JulianCalendar
Zorglub.Time.Specialized.JulianCalendar.JulianCalendar() -> void
Zorglub.Time.Specialized.JulianCalendar.MonthsInYear.get -> int
Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.Adjust(System.Func<Zorglub.Time.Specialized.JulianDate, Zorglub.Time.Specialized.JulianDate>! adjuster) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.Century.get -> int
Zorglub.Time.Specialized.JulianDate.CenturyOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Specialized.JulianDate.CompareTo(object? obj) -> int
Zorglub.Time.Specialized.JulianDate.CompareTo(Zorglub.Time.Specialized.JulianDate other) -> int
Zorglub.Time.Specialized.JulianDate.CountDaysSince(Zorglub.Time.Specialized.JulianDate other) -> int
Zorglub.Time.Specialized.JulianDate.CountElapsedDaysInMonth() -> int
Zorglub.Time.Specialized.JulianDate.CountElapsedDaysInYear() -> int
Zorglub.Time.Specialized.JulianDate.CountRemainingDaysInMonth() -> int
Zorglub.Time.Specialized.JulianDate.CountRemainingDaysInYear() -> int
Zorglub.Time.Specialized.JulianDate.Day.get -> int
Zorglub.Time.Specialized.JulianDate.DayNumber.get -> Zorglub.Time.DayNumber
Zorglub.Time.Specialized.JulianDate.DayOfWeek.get -> System.DayOfWeek
Zorglub.Time.Specialized.JulianDate.DayOfYear.get -> int
Zorglub.Time.Specialized.JulianDate.DaysSinceEpoch.get -> int
Zorglub.Time.Specialized.JulianDate.Deconstruct(out int year, out int dayOfYear) -> void
Zorglub.Time.Specialized.JulianDate.Deconstruct(out int year, out int month, out int day) -> void
Zorglub.Time.Specialized.JulianDate.Equals(Zorglub.Time.Specialized.JulianDate other) -> bool
Zorglub.Time.Specialized.JulianDate.IsIntercalary.get -> bool
Zorglub.Time.Specialized.JulianDate.IsSupplementary.get -> bool
Zorglub.Time.Specialized.JulianDate.JulianDate() -> void
Zorglub.Time.Specialized.JulianDate.JulianDate(int year, int dayOfYear) -> void
Zorglub.Time.Specialized.JulianDate.JulianDate(int year, int month, int day) -> void
Zorglub.Time.Specialized.JulianDate.JulianDate(Zorglub.Time.DayNumber dayNumber) -> void
Zorglub.Time.Specialized.JulianDate.Month.get -> int
Zorglub.Time.Specialized.JulianDate.Nearest(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.Next(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.NextDay() -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.NextOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.PlusDays(int days) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.Previous(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.PreviousDay() -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.PreviousOrSame(System.DayOfWeek dayOfWeek) -> Zorglub.Time.Specialized.JulianDate
Zorglub.Time.Specialized.JulianDate.Year.get -> int
Zorglub.Time.Specialized.JulianDate.YearOfCentury.get -> int
Zorglub.Time.Specialized.JulianDate.YearOfEra.get -> Zorglub.Time.Ord
Zorglub.Time.Specialized.SpecialAdjuster<TDate>
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.AdjustDay(TDate date, int newDay) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.AdjustDayOfYear(TDate date, int newDayOfYear) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.AdjustMonth(TDate date, int newMonth) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.AdjustYear(TDate date, int newYear) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.GetEndOfMonth(TDate date) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.GetEndOfYear(TDate date) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.GetStartOfMonth(TDate date) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.GetStartOfYear(TDate date) -> TDate
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.Scope.get -> Zorglub.Time.Hemerology.Scopes.CalendarScope!
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.WithDay(int newDay) -> System.Func<TDate, TDate>!
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.WithDayOfYear(int newDayOfYear) -> System.Func<TDate, TDate>!
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.WithMonth(int newMonth) -> System.Func<TDate, TDate>!
Zorglub.Time.Specialized.SpecialAdjuster<TDate>.WithYear(int newYear) -> System.Func<TDate, TDate>!
Zorglub.Time.Specialized.SpecialCalendar<TDate>
Zorglub.Time.Specialized.SpecialCalendar<TDate>.GetDaysInMonth(int year, int month) -> System.Collections.Generic.IEnumerable<TDate>!
Zorglub.Time.Specialized.SpecialCalendar<TDate>.GetDaysInYear(int year) -> System.Collections.Generic.IEnumerable<TDate>!
Zorglub.Time.Specialized.SpecialCalendar<TDate>.GetEndOfMonth(int year, int month) -> TDate
Zorglub.Time.Specialized.SpecialCalendar<TDate>.GetEndOfYear(int year) -> TDate
Zorglub.Time.Specialized.SpecialCalendar<TDate>.GetStartOfMonth(int year, int month) -> TDate
Zorglub.Time.Specialized.SpecialCalendar<TDate>.GetStartOfYear(int year) -> TDate