<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #><#+

public abstract class VSTemplate : TextTransformation
{
    private const string Indent = "    ";

    private readonly Lazy<ITextTemplatingEngineHost> _host;

    private string _name;
    private string _namespace;

    protected VSTemplate()
    {
        _host = new Lazy<ITextTemplatingEngineHost>(() => HostFactory(this));
    }

    protected VSTemplate(TextTransformation parent)
    {
        if (parent is null) throw new ArgumentNullException(nameof(parent));

        _host = new Lazy<ITextTemplatingEngineHost>(() => HostFactory(parent));
    }

    protected ITextTemplatingEngineHost VSHost { get { return _host.Value; } }

    protected string Name
    {
        get
        {
            return _name; // ??= InferName();
        }

        set
        {
            if (String.IsNullOrWhiteSpace(value))
                throw new ArgumentException("The name can not be null or blank.", nameof(value));

            _name = value;
        }
    }

    protected string Namespace
    {
        get
        {
            return _namespace; // ??= InferNamespace();
        }

        set
        {
            if (String.IsNullOrWhiteSpace(value))
                throw new ArgumentException("The namespace can not be null or blank.", nameof(value));

            _namespace = value;
        }
    }

    public string Execute()
    {
        Initialize();
        return TransformText();
    }

    public override string TransformText()
    {
        WriteContent();
        return GenerationEnvironment.ToString();
    }

    protected virtual void WriteContent() { }

    protected void PushIndent() { PushIndent(Indent); }

    protected void WriteLine() { WriteLine(String.Empty); }

    private static ITextTemplatingEngineHost HostFactory(TextTransformation transformation)
    {
        var transformationType = transformation.GetType();
        var hostProperty = transformationType.GetProperty("Host");

        if (hostProperty is null)
            throw new NotSupportedException(
                "Unable to access the templating engine host. "
                + "Please make sure your template includes hostspecific=\"true\" "
                + "attribute in the <#@ template #> directive.");

        return (ITextTemplatingEngineHost)hostProperty.GetValue(transformation, null);
    }

    private static string InferNamespace()
    {
        return CallContext.LogicalGetData("NamespaceHint").ToString();
    }

    private string InferName()
    {
        return Path.GetFileNameWithoutExtension(VSHost.TemplateFile);
    }*/
}

#>
